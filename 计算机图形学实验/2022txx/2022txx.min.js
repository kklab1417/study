var _0x2104 = ['MeshBasicMaterial', '2D造型技术', 'round', '15px', 'value', '中点法画圆', '#00ff00', 'simplify', 'distance', '12px', 'rhbtn', 'divTitle', 'gammaOutput', '#ff0000', 'expr', 'domElement', '线性拟合', '#ff00f000', '三色学说', 'mouseClicked', 'div3DWork', 'url(', 'mouseMoved', 'pow', 'size', '700', 'btn13', '在多边形外面', 'length', '生成点数据', 'style', 'pnlbtn2', 'clip', 'rotateY', 'btn1', 'Scene', '#ffff00', 'setAttribute', 'parent', 'html', 'MeshLambertMaterial', 'multiply', 'DirectionalLight', 'appendChild', '矩形只需要2个点', 'OctahedronGeometry', 'Bezier曲线', './bird.jpg', 'graybtn', '111.jpg', 'SpotLight', 'SpotLightHelper', 'DDA画线', 'angle', 'WebGLRenderer', '#f0f000', 'pnlbtn0', ',\x20checkP', 'pnlbtn1', '#0000ffa0', 'setClearColor', 'pnlbtn5', '112.jpg', '#ffffff', 'add', 'from', '个交点，为奇数，检查点判别在多边形内部', 'color', 'cos', '3D造型技术', 'lookAt', 'PointsMaterial', 'set', '实体模型', '16px', 'xmin', '#0000a000', './flower.jpg', '参数方程直线', 'updatePixels', 'abs', 'random', 'height', 'CSS3DRenderer', 'translateY', 'background-color', 'divWork', '14px', 'divLeft', '#f0fff0', '10px', 'width', 'shadowMap', 'sqrt', '图像融合', 'shadow', 'mapSize', 'position', 'divpanel1', 'pnlbtn3', 'loadPixels', 'PerspectiveCamera', 'btn10', '生成裁剪矩形点', '200px', '微软雅黑', 'Mesh', 'pixels', 'OrbitControls', 'remove', 'render', 'toString', '线框模型', 'elt', 'loadTexture', 'font-size', '#biaozhup', 'CSS3DObject', 'pnlbtn6', '扫描线填充', 'setSize', '画多边形', 'rotation', 'push', '多边形象限代数和为', '#50f7f0', '点数据生成', 'mousePressed', '包含性检测', 'hello', 'DirectionalLightHelper', 'BoxGeometry', 'MeshPhongMaterial', 'btn4'];
var _0x51c1 = function (_0x2104c9, _0x51c1d0) {
    _0x2104c9 = _0x2104c9 - 0x0;
    var _0x135418 = _0x2104[_0x2104c9];
    return _0x135418;
};
var LeftW = 0x96, TitleH = 0x64;
var workW = 0x4b0, workH = 0x320;
var defaultcvs, divWork, oX, oY, nX, nY;
var divAxisX, divAxisY;
var divLeft, divTitle, divFootHint;
var divpanel1;
var div3DWork;
var zyurl = './';
var pt = [];
var rectpt = [];
var startx = 0x0, starty = 0x0;
var drawptflag = 0x0;
var curve = {'expr': '', 'xmin': 0x0, 'xmax': 0x0};
var sliderR, sliderG, sliderB;
var imgflower, imgbird;

function preload() {
    imgflower = loadImage(_0x51c1('0x4d'));
    imgbird = loadImage(_0x51c1('0x2f'));
}

function main() {
    dispUI();
}

function dispUI() {
    var _0x4b70f7 = 0x28, _0x263860 = 0x14;
    divBack = createCommonDiv(null, 'divBack', windowWidth, windowHeight, 0x0, 0x0, _0x51c1('0x15') + zyurl + 'marble.jpg)');
    divTitle = createCommonDiv(divBack, _0x51c1('0xb'), windowWidth, TitleH, 0x0, 0x0, 'url(' + zyurl + 'timg.gif)');
    divLabel = createCommonDiv(divTitle, 'divLabel', windowWidth, 0x64, 0x0, 0x0, _0x51c1('0x4c'));
    var _0x5845d1 = {
        'font': _0x51c1('0x69'),
        'fontsize': '44px',
        'fontcolor': _0x51c1('0x37'),
        'fontbold': _0x51c1('0x19')
    };
    lblTitle = createLabel(divLabel, 'lblTitle', _0x5845d1, 0x50, -0x19, '有趣的计算机图形学实验(for安农大计科2022)\x20ZYH@安徽省北斗精准农业信息工程实验室');
    var _0x5598ce = 0x82;
    divLeft = createCommonDiv(divBack, _0x51c1('0x58'), LeftW, divBack[_0x51c1('0x52')] - divTitle['height'], 0x0, TitleH, '#393D49');
    var _0x409565 = {'fontsize': _0x51c1('0x3'), 'bkcolor': _0x51c1('0x59')};
    var _0x2c55cd = createBtn(divLeft, 'btn0', _0x409565, _0x5598ce, 0x1e, 0xa, _0x263860, '新画布');
    _0x2c55cd['mousePressed'](prepareCanvas);
    var _0x1e6bba = createBtn(divLeft, _0x51c1('0x22'), _0x409565, _0x5598ce, 0x1e, 0xa, _0x263860 + 0x28, _0x51c1('0x7e'));
    _0x1e6bba['mousePressed'](drawptproc);
    var _0xb42880 = createBtn(divLeft, 'btn2', _0x409565, _0x5598ce, 0x1e, 0xa, _0x263860 + 0x50, _0x51c1('0x34'));
    _0xb42880[_0x51c1('0x7f')](ddaproc);
    var _0x2d7d4c = createBtn(divLeft, 'btn3', _0x409565, _0x5598ce, 0x1e, 0xa, _0x263860 + 0x78, 'Bresenham画线');
    _0x2d7d4c['mousePressed'](Bresenhamproc);
    var _0x4effb0 = createBtn(divLeft, _0x51c1('0x85'), _0x409565, _0x5598ce, 0x1e, 0xa, _0x263860 + 0xa0, _0x51c1('0x5'));
    _0x4effb0['mousePressed'](MidCircleproc);
    var _0x434bb5 = createBtn(divLeft, 'btn6', _0x409565, _0x5598ce, 0x1e, 0xa, _0x263860 + 0xc8, _0x51c1('0x79'));
    _0x434bb5[_0x51c1('0x7f')](drawPolyproc);
    var _0xbd4c86 = createBtn(divLeft, 'btn7', _0x409565, _0x5598ce, 0x1e, 0xa, _0x263860 + 0xf0, _0x51c1('0x77'));
    _0xbd4c86['mousePressed'](scanPolyFillproc);

    var _0x4d27d0 = createBtn(divLeft, 'btn9', _0x409565, _0x5598ce, 0x1e, 0xa, _0x263860 + 0x118, 'Co-Su裁剪');
    _0x4d27d0[_0x51c1('0x7f')](CohenSutherlandproc);
    var _0x61f637 = createBtn(divLeft, _0x51c1('0x66'), _0x409565, _0x5598ce, 0x1e, 0xa, _0x263860 + 0x140, 'Su-Hodg裁剪');
    _0x61f637['mousePressed'](SuHodgproc);
    var _0x43391e = createBtn(divLeft, 'btn11', _0x409565, _0x5598ce, 0x1e, 0xa, _0x263860 + 0x168, _0x51c1('0x80'));
    _0x43391e['mousePressed'](InsidePressedproc);
    var _0x565415 = createBtn(divLeft, 'btn12', _0x409565, _0x5598ce, 0x1e, 0xa, _0x263860 + 0x190, '平面消隐');
    _0x565415[_0x51c1('0x7f')](hideproc);
    var _0x418727 = createBtn(divLeft, _0x51c1('0x1a'), _0x409565, _0x5598ce, 0x1e, 0xa, _0x263860 + 0x1b8, _0x51c1('0x1'));
    _0x418727[_0x51c1('0x7f')](model2Dproc);
    var _0x33cd84 = createBtn(divLeft, 'btn14', _0x409565, _0x5598ce, 0x1e, 0xa, _0x263860 + 0x1e0, _0x51c1('0x45'));
    _0x33cd84[_0x51c1('0x7f')](model3Dproc);
    var _0xb36b1a = createBtn(divLeft, 'btn15', _0x409565, _0x5598ce, 0x1e, 0xa, _0x263860 + 0x208, '颜色与光照');
    _0xb36b1a[_0x51c1('0x7f')](colorModelproc);
}

function prepareCanvas() {
    noLoop();
    var _0xcb32c6 = '#000000';
    var _0x300f65, _0x428bcf;
    if (div3DWork) {
        div3DWork[_0x51c1('0x6d')]();
    }
    if (divWork) {
        divWork[_0x51c1('0x6d')]();
    }
    _0x300f65 = (windowWidth - LeftW - workW) / 0x2;
    _0x428bcf = (windowHeight - TitleH - workH) / 0x2;
    divWork = createCommonDiv(divBack, _0x51c1('0x56'), workW, workH, LeftW + _0x300f65, TitleH + _0x428bcf, '#00000000');
    divWork[_0x51c1('0x16')](mousemoveproc);
    oX = int(divWork[_0x51c1('0x5b')] / 0x2);
    oY = int(divWork[_0x51c1('0x52')] / 0x2);
    divHint = createCommonDiv(divWork, 'divHint', 0x50, 0x14, divWork['width'] - 0x50, 0x0, _0x51c1('0x11'));
    divHint[_0x51c1('0x1e')](_0x51c1('0x43'), '#ffffff');
    divHint[_0x51c1('0x1e')](_0x51c1('0x73'), _0x51c1('0x4a'));
    divRgbHint = createCommonDiv(divWork, 'divRgbHint', 0x190, 0x14, 0x0, 0x0, _0x51c1('0x11'));
    divRgbHint[_0x51c1('0x1e')]('color', _0x51c1('0x3f'));
    divRgbHint[_0x51c1('0x1e')](_0x51c1('0x73'), _0x51c1('0x4a'));
    divFootHint = createCommonDiv(divWork, 'divFootHint', divWork['width'], 0x14, 0x0, divWork['height'] - 0x14, _0x51c1('0x11'));
    divFootHint['style']('color', '#ffffff');
    divFootHint['style']('font-size', _0x51c1('0x9'));
    noCanvas();
    defaultcvs = createCanvas(workW, workH);
    background(_0xcb32c6);
    defaultcvs[_0x51c1('0x26')](divWork);
    drawAxis(divWork, oX, oY, '#00ffff80');
    pt.length = 0x0;
    rectpt[_0x51c1('0x1c')] = 0x0;
}

function colorModelproc() {
    if (divpanel1 == null) {
        var _0x411183 = {'fontsize': _0x51c1('0x9'), 'bkcolor': _0x51c1('0x7d')};
        divpanel1 = createCommonDiv(divLeft, _0x51c1('0x62'), divLeft[_0x51c1('0x5b')] - 0x23, 0xe6, divLeft[_0x51c1('0x5b')], this['y'], _0x51c1('0x3b'));
        pnlbtn0 = createBtn(divpanel1, 'pnlbtn0', _0x411183, 0x6e, 0x1e, 0x3, 0x5, _0x51c1('0x12'));
        pnlbtn0['mousePressed'](sanseProc);
        pnlbtn1 = createBtn(divpanel1, _0x51c1('0x3a'), _0x411183, 0x6e, 0x1e, 0x3, 0x5 + 0x1e, 'HSL模型');
        pnlbtn1[_0x51c1('0x7f')](hslModelProc);
        pnlbtn2 = createBtn(divpanel1, _0x51c1('0x1f'), _0x411183, 0x6e, 0x1e, 0x3, 0x5 + 0x3c, 'RGB模型');
        pnlbtn2['mousePressed'](RGBModelProc);
        pnlbtn3 = createBtn(divpanel1, _0x51c1('0x63'), _0x411183, 0x6e, 0x1e, 0x3, 0x5 + 0x5a, 'RGB亮度对照');
        pnlbtn3[_0x51c1('0x7f')](BrightnessProc);
        pnlbtn4 = createBtn(divpanel1, 'pnlbtn4', _0x411183, 0x6e, 0x1e, 0x3, 0x5 + 0x78, '3D颜色立方体');
        pnlbtn4['mousePressed'](RGB3DCubeProc);
        pnlbtn5 = createBtn(divpanel1, 'pnlbtn5', _0x411183, 0x6e, 0x1e, 0x3, 0x5 + 0x96, '光照模型');
        pnlbtn5[_0x51c1('0x7f')](LightProc);
        pnlbtn6 = createBtn(divpanel1, _0x51c1('0x76'), _0x411183, 0x6e, 0x1e, 0x3, 0x5 + 0xb4, '退出');
        pnlbtn6['mousePressed'](panelexitproc);
    }
}

function LightProc() {
    prepare3DCanvas();
    var _0x35f462 = new THREE['Scene']();
    var _0x4b1856 = new THREE[(_0x51c1('0x65'))](0x2d, width / height, 0.1, 0x7d0);
    _0x4b1856[_0x51c1('0x61')]['set'](0xc8, 0x190, 0x1f4);
    _0x4b1856[_0x51c1('0x46')](_0x35f462[_0x51c1('0x61')]);
    var _0x20826c = new THREE[(_0x51c1('0x36'))]();
    _0x20826c[_0x51c1('0x78')](div3DWork['width'], div3DWork['height']);
    _0x20826c[_0x51c1('0x3c')](0x0, 0x1);
    div3DWork[_0x51c1('0x71')][_0x51c1('0x2b')](_0x20826c[_0x51c1('0xf')]);
    var _0x419205 = new THREE['MeshPhongMaterial']();
    var _0x31dc58 = new THREE[(_0x51c1('0x84'))]({'color': 0xaa0000});
    var _0x45dfca = new THREE[(_0x51c1('0x83'))](0xc8, 0x1, 0xc8);
    var _0x1d96b7 = new THREE['BoxGeometry'](0x3, 0x3, 0x3);
    var _0x1528ef = new THREE['Mesh'](_0x45dfca, _0x419205);
    var _0x19da8d = new THREE['Mesh'](_0x1d96b7, _0x31dc58);
    var _0x1e876e = new THREE['AmbientLight'](0x808080);
    var _0x342da3 = _0x107e6b(0xffff00);
    var _0x21d908 = new THREE[(_0x51c1('0x2a'))](255, 0x2);
    var _0x108c89, _0x45908f, _0x180f17;

    function _0x3ce498() {
        _0x20826c[_0x51c1('0x5c')]['enabled'] = !![];
        _0x20826c[_0x51c1('0x5c')]['type'] = THREE['PCFSoftShadowMap'];
        _0x20826c['gammaInput'] = !![];
        _0x20826c[_0x51c1('0xc')] = !![];
        _0x4b1856[_0x51c1('0x61')]['set'](0x2e, 0x16, -0x15);
        _0x342da3['position']['set'](0x5, 0x14, 0x5);
        _0x21d908[_0x51c1('0x61')][_0x51c1('0x48')](0xf, 0x14, -0xa);
        _0x108c89 = new THREE[(_0x51c1('0x33'))](_0x342da3);
        _0x45908f = new THREE[(_0x51c1('0x82'))](_0x21d908, 0x2, 0xff00);
        _0x419205[_0x51c1('0x43')][_0x51c1('0x48')](0x404040);
        _0x1528ef['receiveShadow'] = !![];
        _0x1528ef[_0x51c1('0x61')]['set'](0x0, -0.05, 0x0);
        _0x19da8d['castShadow'] = !![];
        _0x19da8d['receiveShadow'] = !![];
        _0x19da8d[_0x51c1('0x61')]['set'](0x0, 0x5, 0x0);
        _0x35f462[_0x51c1('0x40')](_0x1528ef);
        _0x35f462['add'](_0x19da8d);
        _0x35f462[_0x51c1('0x40')](_0x1e876e);
        _0x35f462[_0x51c1('0x40')](_0x342da3);
        _0x35f462[_0x51c1('0x40')](_0x108c89);
        _0x35f462['add'](_0x21d908);
        _0x35f462['add'](_0x45908f);
    }

    function _0x107e6b(_0x5c4cb8) {
        var _0x40c12e = new THREE[(_0x51c1('0x32'))](_0x5c4cb8, 0x2);
        _0x40c12e['castShadow'] = !![];
        _0x40c12e[_0x51c1('0x35')] = 0.3;
        _0x40c12e['penumbra'] = 0.2;
        _0x40c12e['decay'] = 0x2;
        _0x40c12e[_0x51c1('0x8')] = 0x32;
        _0x40c12e['shadow']['mapSize']['width'] = 0x400;
        _0x40c12e[_0x51c1('0x5f')][_0x51c1('0x60')][_0x51c1('0x52')] = 0x400;
        return _0x40c12e;
    }

    function _0x79fd9e() {
        _0x20826c['render'](_0x35f462, _0x4b1856);
        requestAnimationFrame(_0x79fd9e);
    }

    _0x3ce498();
    _0x79fd9e();
    var _0x14a91a = new THREE[(_0x51c1('0x6c'))](_0x4b1856, _0x20826c[_0x51c1('0xf')]);
}

function BrightnessProc() {
    drawSingleColorBlock(-0x1f4, 0x15e, 0x64, 0x12c, 255, 0x0, 0x0);
    drawSingleColorBlock(-0x1f4 + 0x78, 0x15e, 0x64, 0x12c, 0x0, 255, 0x0);
    drawSingleColorBlock(-0x1f4 + 0x2 * 0x78, 0x15e, 0x64, 0x12c, 0x0, 0x0, 255);
}

function RGB3DCubeProc() {
    prepare3DCanvas();
    var _0x123d02 = new THREE[(_0x51c1('0x23'))]();
    var _0x5e0375 = new THREE['PerspectiveCamera'](0x2d, width / height, 0x5, 0xdac);
    _0x5e0375['position'][_0x51c1('0x48')](0x0, 0x0, 0xabe);
    _0x5e0375['lookAt'](_0x123d02['position']);
    var _0x3e9a90 = new THREE['WebGLRenderer']();
    _0x3e9a90['setSize'](div3DWork[_0x51c1('0x5b')], div3DWork['height']);
    _0x3e9a90[_0x51c1('0x3c')](0x0, 0x1);
    div3DWork['elt']['appendChild'](_0x3e9a90['domElement']);
    const _0x329bfa = 0xf4240;
    const _0x4af25e = new THREE['BufferGeometry']();
    const _0x588884 = [];
    const _0x5362f8 = [];
    const _0x4308df = new THREE['Color']();
    const _0x112d02 = 0x3e8, _0x42cf32 = _0x112d02 / 0x2;
    for (let _0x41d756 = 0x0; _0x41d756 < _0x329bfa; _0x41d756++) {
        const _0x12e1de = Math.random() * _0x112d02 - _0x42cf32;
        const _0x263cc9 = Math.random() * _0x112d02 - _0x42cf32;
        const _0x45f006 = Math['random']() * _0x112d02 - _0x42cf32;
        _0x588884[_0x51c1('0x7b')](_0x12e1de, _0x263cc9, _0x45f006);
        const _0x3d0d0f = _0x12e1de / _0x112d02 + 0.5;
        const _0x59357e = _0x263cc9 / _0x112d02 + 0.5;
        const _0x6b64b = _0x45f006 / _0x112d02 + 0.5;
        _0x4308df['setRGB'](_0x3d0d0f, _0x59357e, _0x6b64b);
        _0x5362f8[_0x51c1('0x7b')](_0x4308df['r'], _0x4308df['g'], _0x4308df['b']);
    }
    _0x4af25e['setAttribute'](_0x51c1('0x61'), new THREE['Float32BufferAttribute'](_0x588884, 0x3));
    _0x4af25e[_0x51c1('0x25')]('color', new THREE['Float32BufferAttribute'](_0x5362f8, 0x3));
    _0x4af25e['computeBoundingSphere']();
    const _0x57eea1 = new THREE[(_0x51c1('0x47'))]({'size': 0x1, 'vertexColors': !![]});
    points = new THREE['Points'](_0x4af25e, _0x57eea1);
    _0x123d02[_0x51c1('0x40')](points);

    function _0xcddfb5() {
        _0x3e9a90['render'](_0x123d02, _0x5e0375);
        requestAnimationFrame(_0xcddfb5);
    }

    _0xcddfb5();
    var _0x189940 = new THREE[(_0x51c1('0x6c'))](_0x5e0375, _0x3e9a90['domElement']);
}

function RGBModelProc() {
    drawRGBBlock(-0x190, -0x140, 0x100);
    initmergecir(0x190, 0x190);
    drawRedCircle(0xc8, 0x12c - 0x3c, 0x64);
    drawGreenCircle(0xc8 - 0x34, 0xc8 - 0x3c, 0x64);
    drawBlueCircle(0xc8 + 0x34, 0xc8 - 0x3c, 0x64);
    showImage(imgflower, oX, 0x0);
    showImage(imgbird, oX, oY);
    var _0x19a838 = {'fontsize': _0x51c1('0x4a'), 'bkcolor': _0x51c1('0x7d')};
    rhbtn = createBtn(divWork, _0x51c1('0xa'), _0x19a838, 0x96, 0x28, oX + imgbird['width'] + 0x5, oY + 0xa, _0x51c1('0x5e'));
    rhbtn['parent'](divWork);
    rhbtn[_0x51c1('0x7f')](mergeIt);
    graybtn = createBtn(divWork, _0x51c1('0x30'), _0x19a838, 0x96, 0x28, oX + imgbird[_0x51c1('0x5b')] + 0x5, oY + 0x3c, '灰度化');
    graybtn['parent'](divWork);
    graybtn[_0x51c1('0x7f')](grayIt);
}

function initmergecir(_0x53eeb6, _0x24bc0f) {
    mergecir = createImage(_0x53eeb6, _0x24bc0f);
    mergecir['loadPixels']();
    for (j = 0x0; j < _0x24bc0f; j++) {
        for (i = 0x0; i < _0x53eeb6; i++) {
            setImgColor(mergecir, i, j, 0x0, 0x0, 0x0, 255);
        }
    }
    mergecir[_0x51c1('0x4f')]();
    image(mergecir, 0x0, 0x0, mergecir['width'], mergecir[_0x51c1('0x52')]);
}

function drawRedCircle(_0x152fef, _0x867db2, _0x28fe24) {
    var _0x841987 = 0x2 * _0x28fe24, _0x2a658f;
    for (var _0x253e56 = 0x0; _0x253e56 < _0x841987; _0x253e56++) {
        for (var _0x4a2742 = 0x0; _0x4a2742 < _0x841987; _0x4a2742++) {
            if (judgeInCircle(_0x28fe24, _0x28fe24, _0x28fe24, _0x4a2742, _0x253e56)) {
                _0x2a658f = getImgColor(mergecir, _0x152fef - _0x28fe24 + _0x4a2742, _0x867db2 - _0x28fe24 + _0x253e56);
                setImgColor(mergecir, _0x152fef - _0x28fe24 + _0x4a2742, _0x867db2 - _0x28fe24 + _0x253e56, 255 + _0x2a658f[0x0], 0x0 + _0x2a658f[0x1], 0x0 + _0x2a658f[0x2], 255);
            }
        }
    }
    mergecir['updatePixels']();
    image(mergecir, 0x64 + 0x0, 0x0, mergecir[_0x51c1('0x5b')], mergecir['height']);
}

function drawGreenCircle(_0x2ee93e, _0x2e3330, _0xbfa502) {
    var _0x24f9d0 = 0x2 * _0xbfa502, _0x4b5238;
    for (var _0x2da121 = 0x0; _0x2da121 < _0x24f9d0; _0x2da121++) {
        for (var _0x18c549 = 0x0; _0x18c549 < _0x24f9d0; _0x18c549++) {
            if (judgeInCircle(_0xbfa502, _0xbfa502, _0xbfa502, _0x18c549, _0x2da121)) {
                _0x4b5238 = getImgColor(mergecir, _0x2ee93e - _0xbfa502 + _0x18c549, _0x2e3330 - _0xbfa502 + _0x2da121);
                setImgColor(mergecir, _0x2ee93e - _0xbfa502 + _0x18c549, _0x2e3330 - _0xbfa502 + _0x2da121, 0x0 + _0x4b5238[0x0], 255 + _0x4b5238[0x1], 0x0 + _0x4b5238[0x2], 255);
            }
        }
    }
    mergecir[_0x51c1('0x4f')]();
    image(mergecir, 0x64 + 0x0, 0x0, mergecir['width'], mergecir[_0x51c1('0x52')]);
}

function drawBlueCircle(_0x1978b0, _0x1f924a, _0x3c4f2f) {
    var _0x39ebbd = 0x2 * _0x3c4f2f, _0x4e8ba5;
    for (var _0x29b9b1 = 0x0; _0x29b9b1 < _0x39ebbd; _0x29b9b1++) {
        for (var _0x5f3505 = 0x0; _0x5f3505 < _0x39ebbd; _0x5f3505++) {
            if (judgeInCircle(_0x3c4f2f, _0x3c4f2f, _0x3c4f2f, _0x5f3505, _0x29b9b1)) {
                _0x4e8ba5 = getImgColor(mergecir, _0x1978b0 - _0x3c4f2f + _0x5f3505, _0x1f924a - _0x3c4f2f + _0x29b9b1);
                setImgColor(mergecir, _0x1978b0 - _0x3c4f2f + _0x5f3505, _0x1f924a - _0x3c4f2f + _0x29b9b1, 0x0 + _0x4e8ba5[0x0], 0x0 + _0x4e8ba5[0x1], 255 + _0x4e8ba5[0x2], 255);
            }
        }
    }
    mergecir['updatePixels']();
    image(mergecir, 0x64 + 0x0, 0x0, mergecir['width'], mergecir[_0x51c1('0x52')]);
}

function judgeInCircle(_0x58c332, _0x16992d, _0xcfe7fa, _0x2c550f, _0x39cc34) {
    if ((_0x58c332 - _0x2c550f) * (_0x58c332 - _0x2c550f) + (_0x16992d - _0x39cc34) * (_0x16992d - _0x39cc34) <= _0xcfe7fa * _0xcfe7fa) return !![];
    return ![];
}

function clearme() {
    initmergecir(0x190, 0x190);
}

function showImage(_0x481519, _0x1000f3, _0x538976) {
    image(_0x481519, _0x1000f3, _0x538976, _0x481519[_0x51c1('0x5b')], _0x481519[_0x51c1('0x52')]);
}

function getImgColor(_0x2cbc44, _0x1e9503, _0x1260e7) {
    w = _0x2cbc44['width'];
    index = (_0x1e9503 + _0x1260e7 * w) * 0x4;
    red = _0x2cbc44['pixels'][index];
    green = _0x2cbc44[_0x51c1('0x6b')][index + 0x1];
    blue = _0x2cbc44[_0x51c1('0x6b')][index + 0x2];
    alpha = _0x2cbc44[_0x51c1('0x6b')][index + 0x3];
    return [red, green, blue, alpha];
}

var a = 0x0;
var rvsflag = 0x0;

function mergeIt() {
    var _0x41beca, _0x3de3dd, _0x371de3, _0x2a792e, _0x5d305a;
    if (rvsflag == 0x0) {
        a = a + 0.05;
        if (a >= 0x1) rvsflag = 0x1;
    }
    if (rvsflag == 0x1) {
        a = a - 0.05;
        if (a <= 0x0) rvsflag = 0x0;
    }
    var _0x3b3b4e = imgflower;
    var _0x31f38d = imgbird;
    _0x3b3b4e['loadPixels']();
    _0x31f38d[_0x51c1('0x64')]();
    var _0x3794c6 = _0x3b3b4e[_0x51c1('0x5b')];
    var _0x3c3ebc = _0x3b3b4e[_0x51c1('0x52')];
    var _0x31c189 = _0x31f38d[_0x51c1('0x5b')];
    var _0x29aa43 = _0x31f38d['height'];
    var _0x260dcf = createImage(_0x31c189, _0x3c3ebc);
    _0x260dcf[_0x51c1('0x64')]();
    for (var _0x355f2c = 0x0; _0x355f2c < _0x31c189; _0x355f2c++) {
        for (var _0x13a7e6 = 0x0; _0x13a7e6 < _0x3c3ebc; _0x13a7e6++) {
            _0x41beca = getImgColor(_0x3b3b4e, _0x355f2c, _0x13a7e6);
            _0x3de3dd = getImgColor(_0x31f38d, _0x355f2c, _0x13a7e6);
            _0x371de3 = _0x41beca[0x0] * a + _0x3de3dd[0x0] * (0x1 - a);
            _0x2a792e = _0x41beca[0x1] * a + _0x3de3dd[0x1] * (0x1 - a);
            _0x5d305a = _0x41beca[0x2] * a + _0x3de3dd[0x2] * (0x1 - a);
            setImgColor(_0x260dcf, _0x355f2c, _0x13a7e6, _0x371de3, _0x2a792e, _0x5d305a, 255);
        }
    }
    _0x260dcf[_0x51c1('0x4f')]();
    image(_0x260dcf, oX, oY, _0x260dcf[_0x51c1('0x5b')], _0x260dcf['height']);
}

function grayIt() {
    var _0x5e5d5e = imgbird;
    var _0x21d9f6, _0x34f56a;
    _0x5e5d5e['loadPixels']();
    w = _0x5e5d5e[_0x51c1('0x5b')];
    h = _0x5e5d5e[_0x51c1('0x52')];
    var _0x151475 = createImage(w, h);
    _0x151475['loadPixels']();
    for (var _0x1086a8 = 0x0; _0x1086a8 < w; _0x1086a8++) {
        for (var _0x209534 = 0x0; _0x209534 < h; _0x209534++) {
            _0x21d9f6 = getImgColor(_0x5e5d5e, _0x1086a8, _0x209534);
            _0x34f56a = _0x21d9f6[0x0] * 0.3 + _0x21d9f6[0x1] * 0.6 + _0x21d9f6[0x2] * 0.1;
            setImgColor(_0x151475, _0x1086a8, _0x209534, _0x34f56a, _0x34f56a, _0x34f56a, 255);
        }
    }
    _0x151475[_0x51c1('0x4f')]();
    image(_0x151475, oX, oY, _0x151475['width'], _0x151475[_0x51c1('0x52')]);
}

function setImgColor(_0x5b45eb, _0x478d2d, _0x336bcb, _0x31e059, _0x23205e, _0xcda3ae, _0x30ff36) {
    w = _0x5b45eb[_0x51c1('0x5b')];
    index = (_0x478d2d + _0x336bcb * w) * 0x4;
    _0x5b45eb[_0x51c1('0x6b')][index] = _0x31e059;
    _0x5b45eb['pixels'][index + 0x1] = _0x23205e;
    _0x5b45eb['pixels'][index + 0x2] = _0xcda3ae;
    _0x5b45eb['pixels'][index + 0x3] = _0x30ff36;
}

function drawRGBBlock(_0x246ea0, _0x2c482a, _0x1a5a35) {
    var _0x15473e, _0x47ccd1, _0x5d64bf;
    var _0x48c33f, _0x2886e8;
    var _0x402442;
    for (var _0x30c314 = 0x0, _0x29a117 = 0x0; _0x29a117 < 0x100; _0x29a117++, _0x30c314++) {
        for (var _0x393f63 = 0x0, _0x5e01d7 = 0x0; _0x5e01d7 < 0x100; _0x5e01d7++, _0x393f63++) {
            _0x402442 = rgb2color(_0x29a117, _0x5e01d7, 0x0);
            xoySetPixel(_0x246ea0 + _0x30c314, _0x2c482a + _0x393f63, _0x402442);
        }
    }
}

function hslModelProc() {
    drawHslPlate(0x12c, -0xc8, 0x96);
}

function drawHslPlate(_0x2706b3, _0x10ff03, _0x4f946b) {
    saturation = 0x64;
    luminance = 0x64;
    colorMode(HSB, 0x168, 0x64, 0x64, 0x1);
    for (var _0x51e928 = 0x0; _0x51e928 < 0x168; _0x51e928++) {
        var _0x2a8c6b = _0x51e928;
        var _0x732570 = Math['PI'] * _0x2a8c6b / 0xb4;
        var _0x39452e = _0x4f946b * Math[_0x51c1('0x44')](_0x732570);
        var _0x46e2e2 = _0x4f946b * Math['sin'](_0x732570);
        strokeWeight(0x3);
        stroke(_0x2a8c6b, saturation, luminance);
        line(oX + _0x2706b3, oY - _0x10ff03, oX + _0x39452e + _0x2706b3, oY + _0x46e2e2 - _0x10ff03);
    }
}

function sanseProc() {
    loop();
    colorMode(RGB, 255);
    sliderR = createSlider(0x0, 255, 0x0);
    sliderR['position'](oX + 0xc8, 0xa);
    sliderR['style'](_0x51c1('0x5b'), '200px');
    sliderR['parent'](divWork);
    sliderG = createSlider(0x0, 255, 0x0);
    sliderG['position'](oX + 0xc8, 0x1e);
    sliderG['style'](_0x51c1('0x5b'), _0x51c1('0x68'));
    sliderG['parent'](divWork);
    sliderB = createSlider(0x0, 255, 0x0);
    sliderB['position'](oX + 0xc8, 0x32);
    sliderB['style'](_0x51c1('0x5b'), '200px');
    sliderB['parent'](divWork);
}

function draw() {
    if (sliderR != null && sliderG != null && sliderB != null) {
        R = sliderR[_0x51c1('0x4')]();
        G = sliderG['value']();
        B = sliderB[_0x51c1('0x4')]();
        drawSingleColorBlock(0xb4, 0x12c, 255, 255, R, G, B);
    }
}

function drawSingleColorBlock(_0x6f825d, _0x29221a, _0x24f0b8, _0x379777, _0x2c4d23, _0xb4553a, _0x36e442) {
    fill(color(_0x2c4d23, _0xb4553a, _0x36e442));
    rect(oX + _0x6f825d, oY - _0x29221a, _0x24f0b8, _0x379777);
}

function model2Dproc() {
    if (divpanel1 == null) {
        var _0x1415dd = {'fontsize': _0x51c1('0x9'), 'bkcolor': _0x51c1('0x7d')};
        divpanel1 = createCommonDiv(divLeft, 'divpanel1', divLeft[_0x51c1('0x5b')] - 0x23, 0xe6, divLeft['width'], this['y'], '#0000ffa0');
        pnlbtn0 = createBtn(divpanel1, _0x51c1('0x38'), _0x1415dd, 0x6e, 0x1e, 0x3, 0x5, _0x51c1('0x4e'));
        pnlbtn0['mousePressed'](arglineProc);
        pnlbtn1 = createBtn(divpanel1, 'pnlbtn1', _0x1415dd, 0x6e, 0x1e, 0x3, 0x5 + 0x1e, '参数方程圆');
        pnlbtn1['mousePressed'](argcirProc);
        pnlbtn2 = createBtn(divpanel1, _0x51c1('0x1f'), _0x1415dd, 0x6e, 0x1e, 0x3, 0x5 + 0x3c, '插值曲线');
        pnlbtn2['mousePressed'](PolynomialProc);
        pnlbtn3 = createBtn(divpanel1, 'pnlbtn3', _0x1415dd, 0x6e, 0x1e, 0x3, 0x5 + 0x5a, _0x51c1('0x10'));
        pnlbtn3[_0x51c1('0x7f')](huiguiProc);
        pnlbtn4 = createBtn(divpanel1, 'pnlbtn4', _0x1415dd, 0x6e, 0x1e, 0x3, 0x5 + 0x78, '曲线矢量');
        pnlbtn4[_0x51c1('0x7f')](curveVectProc);
        pnlbtn5 = createBtn(divpanel1, _0x51c1('0x3d'), _0x1415dd, 0x6e, 0x1e, 0x3, 0x5 + 0x96, _0x51c1('0x2e'));
        pnlbtn5[_0x51c1('0x7f')](bezierproc);
        pnlbtn6 = createBtn(divpanel1, _0x51c1('0x76'), _0x1415dd, 0x6e, 0x1e, 0x3, 0x5 + 0x96, 'deCasteljau');
        pnlbtn6[_0x51c1('0x7f')](deCasteljauproc);
        pnlbtn6 = createBtn(divpanel1, _0x51c1('0x76'), _0x1415dd, 0x6e, 0x1e, 0x3, 0x5 + 0xb4, '退出');
        pnlbtn6[_0x51c1('0x7f')](panelexitproc);
    }
}drawPoly

function huiguiProc() {
    n = pt.length;
    if (n < 0x5) return;
    mx = 0x0;
    my = 0x0;
    xy = 0x0;
    x2 = 0x0;
    minx = 0x270f, miny = 0x270f, maxx = -0x270f, maxy = -0x270f;
    for (i = 0x0; i < n; i++) {
        mx = mx + pt[i][0x0];
        my = my + pt[i][0x1];
        xy = xy + pt[i][0x0] * pt[i][0x1];
        x2 = x2 + pt[i][0x0] * pt[i][0x0];
        if (minx > pt[i][0x0]) minx = pt[i][0x0];
        if (miny > pt[i][0x1]) miny = pt[i][0x1];
        if (maxx < pt[i][0x0]) maxx = pt[i][0x0];
        if (maxy < pt[i][0x1]) maxy = pt[i][0x1];
    }
    mx = mx / n;
    my = my / n;
    a = (xy - n * mx * my) / (x2 - n * mx * mx);
    b = my - a * mx;
    maxl = maxx - minx >= maxy - miny ? maxx - minx : maxy - miny;
    for (x = minx; x < maxx; x++) {
        y = int(a * x + b);
        xoySetPixel(x, y, _0x51c1('0x24'), 0x1);
    }
}

t = 0x0;

function deCasteljauproc() {
    n = pt[_0x51c1('0x1c')];
    if (n < 0x3) return;
    for (t = 0x0; t <= 0x1; t = t + 0.001) {
        res = deCasteljau(pt, t);
        xoySetPixel(int(res[0x0][0x0]), int(res[0x0][0x1]), '#ff0000', 0x1);
    }
}

function deCasteljau(_0x167ee6, _0x5221d2) {
    curp = [];
    nextp = [];
    curp = [..._0x167ee6];
    while (0x1) {
        n = curp[_0x51c1('0x1c')];
        if (n == 0x1) break;
        k = 0x0;
        for (i = 0x0; i < n - 0x1; i++) {
            xi = curp[i][0x0] * (0x1 - _0x5221d2) + curp[i + 0x1][0x0] * _0x5221d2;
            yi = curp[i][0x1] * (0x1 - _0x5221d2) + curp[i + 0x1][0x1] * _0x5221d2;
            nextp[_0x51c1('0x7b')]([xi, yi]);
        }
        if (nextp[_0x51c1('0x1c')] == 0x1) {
            return nextp;
        }
        if (nextp['length'] > 0x1) {
            curp = [...nextp];
            nextp[_0x51c1('0x1c')] = 0x0;
        }
    }
}

function bezierproc() {
    if (pt[_0x51c1('0x1c')] == 0x2) {
        det = Math['abs'](pt[0x1][0x0] - pt[0x0][0x0]) > Math[_0x51c1('0x50')](pt[0x1][0x1] - pt[0x0][0x1]) ? Math[_0x51c1('0x50')](pt[0x1][0x0] - pt[0x0][0x0]) : Math[_0x51c1('0x50')](pt[0x1][0x1] - pt[0x0][0x1]);
        step = 0x1 / det;
        bezier1({'x': pt[0x0][0x0], 'y': pt[0x0][0x1]}, {'x': pt[0x1][0x0], 'y': pt[0x1][0x1]}, t);
        t = t + step;
        if (t > 0x1) t = 0x0;
    }
    if (pt[_0x51c1('0x1c')] == 0x3) {
        det = Math['abs'](pt[0x2][0x0] - pt[0x0][0x0]) > Math['abs'](pt[0x2][0x1] - pt[0x0][0x1]) ? Math['abs'](pt[0x2][0x0] - pt[0x0][0x0]) : Math['abs'](pt[0x2][0x1] - pt[0x0][0x1]);
        step = 0x1 / det;
        bezier2({'x': pt[0x0][0x0], 'y': pt[0x0][0x1]}, {'x': pt[0x1][0x0], 'y': pt[0x1][0x1]}, {
            'x': pt[0x2][0x0],
            'y': pt[0x2][0x1]
        }, t);
        t = t + step;
        if (t > 0x1) t = 0x0;
    }
}

function bezier1(_0x5b3698, _0x4cdb70, _0x380cd4) {
    var _0x4aae57 = {'x': 0x0, 'y': 0x0};
    _0x4aae57['x'] = _0x5b3698['x'] + (_0x4cdb70['x'] - _0x5b3698['x']) * _0x380cd4;
    _0x4aae57['y'] = _0x5b3698['y'] + (_0x4cdb70['y'] - _0x5b3698['y']) * _0x380cd4;
    xoySetPixel(_0x4aae57['x'], _0x4aae57['y'], _0x51c1('0xd'), 0x3);
}

function bezier2(_0x49f02d, _0x30d1be, _0x61c5f5, _0x263d32) {
    var _0x3c6482 = {'x': 0x0, 'y': 0x0}, _0xf711e0 = {'x': 0x0, 'y': 0x0};
    var _0x369d61 = {'x': 0x0, 'y': 0x0};
    _0x3c6482['x'] = _0x49f02d['x'] + (_0x30d1be['x'] - _0x49f02d['x']) * _0x263d32;
    _0x3c6482['y'] = _0x49f02d['y'] + (_0x30d1be['y'] - _0x49f02d['y']) * _0x263d32;
    _0xf711e0['x'] = _0x30d1be['x'] + (_0x61c5f5['x'] - _0x30d1be['x']) * _0x263d32;
    _0xf711e0['y'] = _0x30d1be['y'] + (_0x61c5f5['y'] - _0x30d1be['y']) * _0x263d32;
    _0x369d61['x'] = _0x3c6482['x'] + (_0xf711e0['x'] - _0x3c6482['x']) * _0x263d32;
    _0x369d61['y'] = _0x3c6482['y'] + (_0xf711e0['y'] - _0x3c6482['y']) * _0x263d32;
    xoySetPixel(_0x369d61['x'], _0x369d61['y'], '#ff0000', 0x1);
}

function curveVectProc() {
    divWork['mouseClicked'](mouseClickedvectptproc);
}

function mouseClickedvectptproc() {
    x = mouseX - oX;
    y = calcExpr(curve[_0x51c1('0xe')], x);
    p0 = [0x0, 0x0];
    p1 = [x, y];
    xoyDrawArrowLine(p0, p1, '#00ff00');
    dx = math['derivative'](curve[_0x51c1('0xe')], 'x');
    dexpstr = dx[_0x51c1('0x6f')]();
    k = calcExpr(dexpstr, x);
    R = 0x28;
    k1 = Math['sqrt'](0x1 + k * k);
    x0 = R / k1;
    y0 = R * k / k1;
    dp0 = [x, y];
    dp1 = [x + x0, y + y0];
    xoyDrawArrowLine(dp0, dp1, _0x51c1('0x24'));
    k = -0x1 / k;
    k1 = Math[_0x51c1('0x5d')](0x1 + k * k);
    x0 = R / k1;
    y0 = R * k / k1;
    dp0 = [x, y];
    dp1 = [x + x0, y + y0];
    xoyDrawArrowLine(dp0, dp1, _0x51c1('0x3f'));
}

function PolynomialProc() {
    if (pt.length > 0x1) {
        n = pt.length;
        A = [];
        Y = [];
        for (k = 0x0; k < n; k++) {
            xl = [];
            for (i = 0x0; i < n; i++) {
                xx = Math[_0x51c1('0x17')](pt[k][0x0], n - i - 0x1);
                xl['push'](xx);
            }
            A[_0x51c1('0x7b')](xl);
            Y[_0x51c1('0x7b')](pt[k][0x1]);
        }
        IA = math['inv'](A);
        TY = math['transpose'](Y);
        X = math[_0x51c1('0x29')](IA, TY);
        for (x = pt[0x0][0x0]; x < pt[n - 0x1][0x0]; x++) {
            y = 0x0;
            for (i = 0x0; i < n; i++) {
                y = y + X[i] * Math['pow'](x, n - i - 0x1);
            }
            xoySetPixel(x, int(y), '#ff0000', 0x1);
        }
        str1 = ComposeExpress(X);
        divFootHint[_0x51c1('0x27')]('曲线方程为：y=' + str1);
        curve['expr'] = str1;
        curve[_0x51c1('0x4b')] = pt[0x0][0x0];
        curve['xmax'] = pt[n - 0x1][0x0];
    }
}

function ComposeExpress(_0x488813) {
    n = _0x488813[_0x51c1('0x1c')];
    str1 = '';
    cof = '';
    for (i = 0x0; i < n; i++) {
        pow = n - 0x1 - i;
        if (pow == 0x1) strpow = 'x';
        if (pow == 0x0) strpow = '';
        if (pow > 0x1) strpow = 'x^' + (n - 0x1 - i)['toString']();
        if (_0x488813[i] > 0x0) cof = '+' + _0x488813[i][_0x51c1('0x6f')]();
        if (i == 0x0) cof = _0x488813[i][_0x51c1('0x6f')]();
        if (_0x488813[i] < 0x0) cof = _0x488813[i]['toString']();
        str1 = str1 + cof + strpow;
    }
    return str1;
}

function calcExpr(_0x31fa57, _0x277d39) {
    f = math['parse'](_0x31fa57);
    exprobj = math[_0x51c1('0x7')](f);
    _0x277d39 = exprobj['evaluate']({'x': _0x277d39});
    return _0x277d39;
}

function argcirProc() {
    if (pt[_0x51c1('0x1c')] == 0x2) {
        P1 = pt[0x0];
        P2 = pt[0x1];
        r = Math[_0x51c1('0x5d')]((P1[0x0] - P2[0x0]) * (P1[0x0] - P2[0x0]) + (P1[0x1] - P2[0x1]) * (P1[0x1] - P2[0x1]));
        dt = 0x1 / r;
        for (t = 0x0; t < 0x1; t = t + dt) {
            px = int((0x1 - t * t) / (0x1 + t * t) * r);
            py = int(0x2 * t / (0x1 + t * t) * r);
            xoySetPixel(P1[0x0] + px, P1[0x1] + py, _0x51c1('0xd'), 0x1);
            xoySetPixel(P1[0x0] - px, P1[0x1] + py, '#ff0000', 0x1);
            xoySetPixel(P1[0x0] + px, P1[0x1] - py, '#ff0000', 0x1);
            xoySetPixel(P1[0x0] - px, P1[0x1] - py, _0x51c1('0xd'), 0x1);
        }
    }
}

function arglineProc() {
    if (pt.length == 0x2) {
        P1 = pt[0x0];
        P2 = pt[0x1];
        dx = P2[0x0] - P1[0x0];
        dy = P2[0x1] - P1[0x1];
        maxd = dx > dy ? dx : dy;
        dt = 0x1 / maxd;
        for (t = 0x0; t < 0x1; t = t + dt) {
            px = P1[0x0] + (P2[0x0] - P1[0x0]) * t;
            py = P1[0x1] + (P2[0x1] - P1[0x1]) * t;
            xoySetPixel(int(px), int(py), '#ff0000', 0x1);
        }
    }
}

function prepare3DCanvas() {
    if (div3DWork) {
        div3DWork[_0x51c1('0x6d')]();
    }
    if (divWork) {
        divWork[_0x51c1('0x6d')]();
    }
    posx = (windowWidth - LeftW - workW) / 0x2;
    posy = (windowHeight - TitleH - workH) / 0x2;
    div3DWork = createCommonDiv(divBack, _0x51c1('0x14'), workW, workH, LeftW + posx, TitleH + posy, '#002020d0');
    pt.length = 0x0;
    rectpt[_0x51c1('0x1c')] = 0x0;
}

function hideproc() {
    prepare3DCanvas();
    scene = new THREE[(_0x51c1('0x23'))]();
    var _0x206fb9 = new THREE[(_0x51c1('0x53'))]();
    _0x206fb9['setSize'](div3DWork[_0x51c1('0x5b')], div3DWork['height']);
    div3DWork[_0x51c1('0x71')]['appendChild'](_0x206fb9[_0x51c1('0xf')]);
    camera = new THREE['PerspectiveCamera'](0x2d, div3DWork['width'], div3DWork['height'], 0x1, 0x3e8);
    camera[_0x51c1('0x61')]['set'](0x0, 0x0, 0xc8);
    var _0x4bb883 = createDiv();
    _0x4bb883['size'](0x64, 0x64);
    _0x4bb883[_0x51c1('0x1e')]('background', '#ff000080');
    var _0x211a25 = createDiv();
    _0x211a25[_0x51c1('0x18')](0x50, 0x64);
    _0x211a25[_0x51c1('0x1e')]('background', '#000080f0');
    const _0x1c0b75 = new THREE['CSS3DObject'](_0x4bb883['elt']);
    const _0x1507d5 = new THREE[(_0x51c1('0x75'))](_0x211a25['elt']);
    _0x1507d5[_0x51c1('0x61')]['z'] = 0x14;
    _0x1507d5['position']['x'] = 0x1e;
    _0x1507d5[_0x51c1('0x7a')]['x'] = 3.1415 / 0x4;
    scene[_0x51c1('0x40')](_0x1c0b75);
    scene['add'](_0x1507d5);

    function _0x4070a6() {
        _0x206fb9[_0x51c1('0x6e')](scene, camera);
        requestAnimationFrame(_0x4070a6);
    }

    _0x4070a6();
    var _0x4ebb00 = new THREE['OrbitControls'](camera, _0x206fb9[_0x51c1('0xf')]);
}

function Btntestproc() {
    alert(_0x51c1('0x81'));
}

function model3Dproc() {
    pt.length = 0x0;
    rectpt['length'] = 0x0;
    if (divpanel1 == null) {
        var _0x4bfa74 = {'fontsize': '12px', 'bkcolor': _0x51c1('0x7d')};
        divpanel1 = createCommonDiv(divLeft, 'divpanel1', divLeft['width'] - 0x23, 0x96, divLeft[_0x51c1('0x5b')], this['y'], _0x51c1('0x3b'));
        pnlbtn0 = createBtn(divpanel1, 'pnlbtn0', _0x4bfa74, 0x6e, 0x1e, 0x3, 0x5, _0x51c1('0x70'));
        pnlbtn0['mousePressed'](wireframeproc);
        pnlbtn1 = createBtn(divpanel1, 'pnlbtn1', _0x4bfa74, 0x6e, 0x1e, 0x3, 0x5 + 0x1e, '曲面模型');
        pnlbtn1['mousePressed'](faceModelproc);
        pnlbtn2 = createBtn(divpanel1, _0x51c1('0x1f'), _0x4bfa74, 0x6e, 0x1e, 0x3, 0x5 + 0x3c, _0x51c1('0x49'));
        pnlbtn2['mousePressed'](solidModelproc);
        pnlbtn3 = createBtn(divpanel1, 'pnlbtn3', _0x4bfa74, 0x6e, 0x1e, 0x3, 0x5 + 0x5a, '退出');
        pnlbtn3['mousePressed'](panelexitproc);
    }
}

function solidModelproc() {
    prepare3DCanvas();
    var _0xf85ca4 = new THREE[(_0x51c1('0x23'))]();
    var _0x47c35a = new THREE['PerspectiveCamera'](0x2d, width / height, 0.1, 0x3e8);
    _0x47c35a[_0x51c1('0x61')]['set'](0xc8, 0x190, 0x1f4);
    _0x47c35a['lookAt'](_0xf85ca4['position']);
    var _0x41abc5 = new THREE[(_0x51c1('0x36'))]();
    _0x41abc5[_0x51c1('0x78')](div3DWork[_0x51c1('0x5b')], div3DWork['height']);
    _0x41abc5[_0x51c1('0x3c')](0x0, 0x1);
    div3DWork['elt']['appendChild'](_0x41abc5['domElement']);
    var _0x585ad9 = [];
    var _0x39c5fd = [_0x51c1('0x31'), _0x51c1('0x3e'), '113.jpg', '114.jpg', '115.jpg', '116.jpg'];
    for (var _0x1486db = 0x0; _0x1486db < 0x6; _0x1486db++) {
        _0x585ad9[_0x51c1('0x7b')](new THREE[(_0x51c1('0x0'))]({'map': THREE['ImageUtils'][_0x51c1('0x72')]('./images/' + _0x39c5fd[_0x1486db])}));
    }
    mesh = new THREE['Mesh'](new THREE[(_0x51c1('0x83'))](0x96, 0x96, 0x96), new THREE['MeshFaceMaterial'](_0x585ad9));
    _0xf85ca4['add'](mesh);

    function _0x552681() {
        _0x41abc5['render'](_0xf85ca4, _0x47c35a);
        requestAnimationFrame(_0x552681);
    }

    _0x552681();
    var _0x469177 = new THREE[(_0x51c1('0x6c'))](_0x47c35a, _0x41abc5['domElement']);
}

function wireframeproc() {
    prepare3DCanvas();
    var _0x6df974 = new THREE[(_0x51c1('0x23'))]();
    var _0x4b686c = new THREE['PerspectiveCamera'](0x2d, width / height, 0.1, 0x3e8);
    _0x4b686c['position'][_0x51c1('0x48')](0xc8, 0x190, 0x1f4);
    _0x4b686c['lookAt'](_0x6df974[_0x51c1('0x61')]);
    var _0x4ae58e = new THREE['WebGLRenderer']();
    _0x4ae58e[_0x51c1('0x78')](div3DWork[_0x51c1('0x5b')], div3DWork['height']);
    _0x4ae58e['setClearColor'](0x0, 0x1);
    div3DWork['elt'][_0x51c1('0x2b')](_0x4ae58e['domElement']);
    var _0x2e842c = new THREE['SphereGeometry'](0x28, 0x14, 0x14);
    var _0x4ed041 = new THREE[(_0x51c1('0x0'))]({'color': 0x7777ff, 'wireframe': !![]});
    var _0x4ba101 = new THREE[(_0x51c1('0x6a'))](_0x2e842c, _0x4ed041);
    _0x4ba101[_0x51c1('0x61')]['x'] = 0x14;
    _0x6df974[_0x51c1('0x40')](_0x4ba101);
    var _0x17c677 = new THREE[(_0x51c1('0x83'))](0x28, 0x28, 0x28);
    var _0x325f5 = new THREE['MeshBasicMaterial']({'color': 0xff0000, 'wireframe': !![]});
    var _0x68792b = new THREE[(_0x51c1('0x6a'))](_0x17c677, _0x325f5);
    _0x68792b[_0x51c1('0x61')]['x'] = -0x8c;
    _0x6df974[_0x51c1('0x40')](_0x68792b);

    function _0x3df634() {
        _0x4ae58e[_0x51c1('0x6e')](_0x6df974, _0x4b686c);
        _0x4ba101[_0x51c1('0x21')](0.003);
        _0x68792b['rotateY'](-0.003);
        requestAnimationFrame(_0x3df634);
    }

    _0x3df634();
    var _0x2cea7f = new THREE[(_0x51c1('0x6c'))](_0x4b686c, _0x4ae58e['domElement']);
}

function faceModelproc() {
    prepare3DCanvas();
    var _0x45ca3a = new THREE[(_0x51c1('0x28'))]({'color': 0x49ae});
    var _0x493988 = new THREE[(_0x51c1('0x28'))]({'color': 0x49ae, 'opacity': 0.6, 'transparent': !![]});
    var _0x32e32d = new THREE[(_0x51c1('0x84'))]({'color': 0x49ae, 'specular': 0x4488ee, 'shininess': 0xa});
    var _0x5bc03f = new THREE[(_0x51c1('0x23'))]();
    var _0x4cd0e2 = new THREE['PerspectiveCamera'](0x2d, width / height, 0.1, 0x3e8);
    _0x4cd0e2['position'][_0x51c1('0x48')](0xc8, 0x190, 0x1f4);
    _0x4cd0e2[_0x51c1('0x46')](_0x5bc03f[_0x51c1('0x61')]);
    var _0x1b9573 = new THREE[(_0x51c1('0x36'))]();
    _0x1b9573[_0x51c1('0x78')](div3DWork['width'], div3DWork[_0x51c1('0x52')]);
    _0x1b9573['setClearColor'](0x0, 0x1);
    div3DWork['elt'][_0x51c1('0x2b')](_0x1b9573[_0x51c1('0xf')]);
    var _0x17b110 = new THREE['AxisHelper'](0x12c);
    _0x5bc03f[_0x51c1('0x40')](_0x17b110);
    var _0x2cbe26 = new THREE[(_0x51c1('0x2d'))](0x64);
    var _0xe32c24 = new THREE['Mesh'](_0x2cbe26, _0x32e32d);
    var _0x5816bb = new THREE['OctahedronGeometry'](0x64);
    var _0x1d2d47 = new THREE[(_0x51c1('0x6a'))](_0x5816bb, _0x32e32d);
    _0x1d2d47[_0x51c1('0x54')](0xc8);
    _0x5bc03f[_0x51c1('0x40')](_0xe32c24);
    _0x5bc03f[_0x51c1('0x40')](_0x1d2d47);
    var _0x12bb79 = new THREE['PointLight'](0xffffff);
    _0x12bb79[_0x51c1('0x61')]['set'](0x1f4, 0xc8, 0x12c);
    _0x5bc03f['add'](_0x12bb79);
    var _0x5c50ce = new THREE['AmbientLight'](0x444444);
    _0x5bc03f[_0x51c1('0x40')](_0x5c50ce);

    function _0x16066f() {
        _0x1b9573[_0x51c1('0x6e')](_0x5bc03f, _0x4cd0e2);
        _0xe32c24[_0x51c1('0x21')](0.03);
        _0x1d2d47[_0x51c1('0x21')](-0.03);
        requestAnimationFrame(_0x16066f);
    }

    _0x16066f();
    var _0x17ca00 = new THREE['OrbitControls'](_0x4cd0e2, _0x1b9573[_0x51c1('0xf')]);
}

function drawptproc() {
    pt[_0x51c1('0x1c')] = 0x0;
    rectpt[_0x51c1('0x1c')] = 0x0;
    if (divpanel1 == null) {
        var _0x196e21 = {'fontsize': '12px', 'bkcolor': '#50f7f0'};
        divpanel1 = createCommonDiv(divLeft, _0x51c1('0x62'), divLeft[_0x51c1('0x5b')] - 0x23, 0x78, divLeft['width'], this['y'], _0x51c1('0x3b'));
        pnlbtn0 = createBtn(divpanel1, 'pnlbtn0', _0x196e21, 0x6e, 0x1e, 0x3, 0x5, _0x51c1('0x1d'));
        pnlbtn0['mousePressed'](genFreePtProc);
        pnlbtn1 = createBtn(divpanel1, 'pnlbtn1', _0x196e21, 0x6e, 0x1e, 0x3, 0x5 + 0x28, _0x51c1('0x67'));
        pnlbtn1['mousePressed'](genRectPtProc);
        pnlbtn2 = createBtn(divpanel1, 'pnlbtn2', _0x196e21, 0x6e, 0x1e, 0x3, 0x5 + 0x50, '退出');
        pnlbtn2[_0x51c1('0x7f')](panelexitproc);
    }
}

function mousemoveproc() {
    dispHint();
}

function dispHint() {
    var _0x4b5b05 = mouseX;
    var _0x8a54b0 = mouseY;
    _0x4b5b05 = _0x4b5b05 - oX;
    _0x8a54b0 = oY - _0x8a54b0;
    divHint[_0x51c1('0x27')]('' + int(_0x4b5b05) + ',' + int(_0x8a54b0));
    var _0x9b4e3d;
    _0x9b4e3d = xoyGetPixel(_0x4b5b05, _0x8a54b0);
    hslobj = rgb2hsl(_0x9b4e3d[0x0], _0x9b4e3d[0x1], _0x9b4e3d[0x2]);
    var _0x111833 = 'rgb:[' + _0x9b4e3d[0x0] + ',' + _0x9b4e3d[0x1] + ',' + _0x9b4e3d[0x2] + ']';
    var _0x1c0e44 = 'hsl:[' + hslobj['h'] + ',' + hslobj['s'] + ',' + hslobj['l'] + ']';
    divRgbHint[_0x51c1('0x27')](_0x111833 + '---' + _0x1c0e44);
}

function InsidePressedproc() {
    if (divpanel1 == null) {
        var _0x390a24 = {'fontsize': _0x51c1('0x57'), 'bkcolor': '#50f7f0'};
        divpanel1 = createCommonDiv(divLeft, _0x51c1('0x62'), divLeft['width'] - 0x23, 0x78, divLeft[_0x51c1('0x5b')], this['y'], '#0000ffa0');
        pnlbtn0 = createBtn(divpanel1, 'pnlbtn0', _0x390a24, 0x64, 0x1e, 0x7, 0x5, '射线法');
        pnlbtn0['mousePressed'](rayproc);
        pnlbtn1 = createBtn(divpanel1, 'pnlbtn1', _0x390a24, 0x64, 0x1e, 0x7, 0x5 + 0x28, '弧长法');
        pnlbtn1[_0x51c1('0x7f')](arcproc);
        pnlbtn2 = createBtn(divpanel1, _0x51c1('0x1f'), _0x390a24, 0x64, 0x1e, 0x7, 0x5 + 0x50, '退出');
        pnlbtn2['mousePressed'](panelexitproc);
    }
}

function arcproc() {
    var _0xf0d5a2;
    cnt = pt.length;
    if (cnt >= 0x4) {
        _0xf0d5a2 = pt[cnt - 0x1];
        pt[_0x51c1('0x1c')] = pt[_0x51c1('0x1c')] - 0x1;
        var _0x214492 = [];
        for (var _0x295999 = 0x0; _0x295999 < pt[_0x51c1('0x1c')]; _0x295999++) {
            _0x214492['push']([pt[_0x295999][0x0], pt[_0x295999][0x1]]);
        }
        drawPoly(_0x214492, '#ff0000');
        xoySetPixel(_0xf0d5a2[0x0], _0xf0d5a2[0x1], '#00ff00', 0x5);
        nX = _0xf0d5a2[0x0];
        nY = _0xf0d5a2[0x1];
        var _0x4cdd6a = select('#biaozhup' + cnt);
        _0x4cdd6a[_0x51c1('0x27')]('checkP');
        pt['push'](pt[0x0]);
        moveAxis(oX + nX, oY - nY);
        var _0x17120a = nX, _0x3b5c67 = nY;
        for (var _0x295999 = 0x0; _0x295999 < pt.length - 0x1; _0x295999++) {
            pt[_0x295999][0x0] = pt[_0x295999][0x0] - _0x17120a;
            pt[_0x295999][0x1] = pt[_0x295999][0x1] - _0x3b5c67;
        }
        oX = oX + nX;
        oY = oY - nY;
        judgePtinXOY(pt);
    }
}

function judgePtinXOY(_0x1c80ea) {
    var _0x3fd49b = [];
    var _0x36a610 = _0x1c80ea['length'];
    for (var _0x33ee4f = 0x0; _0x33ee4f < _0x36a610 - 0x1; _0x33ee4f++) {
        if (_0x1c80ea[_0x33ee4f][0x0] >= 0x0 && _0x1c80ea[_0x33ee4f][0x1] >= 0x0) _0x3fd49b['push'](0x1);
        if (_0x1c80ea[_0x33ee4f][0x0] < 0x0 && _0x1c80ea[_0x33ee4f][0x1] >= 0x0) _0x3fd49b['push'](0x2);
        if (_0x1c80ea[_0x33ee4f][0x0] < 0x0 && _0x1c80ea[_0x33ee4f][0x1] < 0x0) _0x3fd49b['push'](0x3);
        if (_0x1c80ea[_0x33ee4f][0x0] >= 0x0 && _0x1c80ea[_0x33ee4f][0x1] < 0x0) _0x3fd49b[_0x51c1('0x7b')](0x4);
        var _0x4b1d0f = select(_0x51c1('0x74') + (_0x33ee4f + 0x1));
        _0x4b1d0f['html']('p' + (_0x33ee4f + 0x1) + ':' + _0x3fd49b[_0x33ee4f]);
    }
    var _0x36f0a4 = 0x0;
    var _0x29d275 = 3.14, _0x36cbdb = 1.57;
    _0x3fd49b[_0x51c1('0x7b')](_0x3fd49b[0x0]);
    for (var _0x33ee4f = 0x0; _0x33ee4f < _0x3fd49b['length'] - 0x1; _0x33ee4f++) {
        if (_0x3fd49b[_0x33ee4f] == 0x1 && _0x3fd49b[_0x33ee4f + 0x1] == 0x1) _0x36f0a4 += 0x0;
        if (_0x3fd49b[_0x33ee4f] == 0x1 && _0x3fd49b[_0x33ee4f + 0x1] == 0x2) _0x36f0a4 += _0x36cbdb;
        if (_0x3fd49b[_0x33ee4f] == 0x1 && _0x3fd49b[_0x33ee4f + 0x1] == 0x3) _0x36f0a4 += -_0x29d275;
        if (_0x3fd49b[_0x33ee4f] == 0x1 && _0x3fd49b[_0x33ee4f + 0x1] == 0x4) _0x36f0a4 += -_0x36cbdb;
        if (_0x3fd49b[_0x33ee4f] == 0x2 && _0x3fd49b[_0x33ee4f + 0x1] == 0x1) _0x36f0a4 += -_0x36cbdb;
        if (_0x3fd49b[_0x33ee4f] == 0x2 && _0x3fd49b[_0x33ee4f + 0x1] == 0x2) _0x36f0a4 += 0x0;
        if (_0x3fd49b[_0x33ee4f] == 0x2 && _0x3fd49b[_0x33ee4f + 0x1] == 0x3) _0x36f0a4 += _0x36cbdb;
        if (_0x3fd49b[_0x33ee4f] == 0x2 && _0x3fd49b[_0x33ee4f + 0x1] == 0x4) _0x36f0a4 += -_0x29d275;
        if (_0x3fd49b[_0x33ee4f] == 0x3 && _0x3fd49b[_0x33ee4f + 0x1] == 0x1) _0x36f0a4 += -_0x29d275;
        if (_0x3fd49b[_0x33ee4f] == 0x3 && _0x3fd49b[_0x33ee4f + 0x1] == 0x2) _0x36f0a4 += -_0x36cbdb;
        if (_0x3fd49b[_0x33ee4f] == 0x3 && _0x3fd49b[_0x33ee4f + 0x1] == 0x3) _0x36f0a4 += 0x0;
        if (_0x3fd49b[_0x33ee4f] == 0x3 && _0x3fd49b[_0x33ee4f + 0x1] == 0x4) _0x36f0a4 += _0x36cbdb;
        if (_0x3fd49b[_0x33ee4f] == 0x4 && _0x3fd49b[_0x33ee4f + 0x1] == 0x1) _0x36f0a4 += _0x36cbdb;
        if (_0x3fd49b[_0x33ee4f] == 0x4 && _0x3fd49b[_0x33ee4f + 0x1] == 0x2) _0x36f0a4 += -_0x29d275;
        if (_0x3fd49b[_0x33ee4f] == 0x4 && _0x3fd49b[_0x33ee4f + 0x1] == 0x3) _0x36f0a4 += -_0x36cbdb;
        if (_0x3fd49b[_0x33ee4f] == 0x4 && _0x3fd49b[_0x33ee4f + 0x1] == 0x4) _0x36f0a4 += 0x0;
    }
    var _0xca62b1;
    if (Math[_0x51c1('0x50')](_0x36f0a4) < 0.1) _0xca62b1 = _0x51c1('0x1b');
    if (Math[_0x51c1('0x50')](_0x36f0a4) < 6.3 && Math[_0x51c1('0x50')](_0x36f0a4) > 0x6) _0xca62b1 = '在多边形里面';
    divFootHint['html'](_0x51c1('0x7c') + _0x36f0a4 + _0x51c1('0x39') + _0xca62b1);
}

function rayproc() {
    if (!divWork || pt[_0x51c1('0x1c')] < 0x4) alert('画布未准备或数据点数小于4，无法计算');
    var _0x423652 = [];
    var _0x2b3ceb;
    cnt = pt[_0x51c1('0x1c')];
    for (i = 0x0; i < cnt - 0x1; i++) {
        _0x423652['push']([pt[i][0x0], pt[i][0x1]]);
    }
    drawPoly(_0x423652, '#ff0000', 0x1);
    _0x2b3ceb = pt[cnt - 0x1];
    xoySetPixel(_0x2b3ceb[0x0], _0x2b3ceb[0x1], _0x51c1('0x24'), 0x6);
    var _0x469011 = select(_0x51c1('0x74') + cnt);
    _0x469011[_0x51c1('0x27')]('checkP');
    var _0x408421 = [];
    for (i = 0x0; i < _0x423652['length'] - 0x1; i++) {
        _0x408421[_0x51c1('0x7b')]([_0x423652[i][0x0], _0x423652[i][0x1], _0x423652[i + 0x1][0x0], _0x423652[i + 0x1][0x1]]);
    }
    _0x408421['push']([_0x423652[_0x423652[_0x51c1('0x1c')] - 0x1][0x0], _0x423652[_0x423652['length'] - 0x1][0x1], _0x423652[0x0][0x0], _0x423652[0x0][0x1]]);
    linecnt = _0x408421[_0x51c1('0x1c')];
    var _0x568494 = [];
    for (i = 0x0; i < linecnt; i++) {
        if (IsOneSide(_0x2b3ceb[0x0], _0x408421[i]) == ![]) {
            _0x568494['push'](_0x408421[i]);
        }
    }
    var _0x3b4b0d = [];
    cnt = _0x568494['length'];
    for (i = 0x0; i < cnt; i++) {
        y = SolveX(_0x2b3ceb[0x0], _0x568494[i]);
        if (y <= _0x2b3ceb[0x1]) {
            _0x3b4b0d[_0x51c1('0x7b')](y);
        }
    }
    cnt = _0x3b4b0d['length'];
    for (i = 0x0; i < cnt; i++) {
        xoySetPixel(_0x2b3ceb[0x0], _0x3b4b0d[i], '#00ff00', 0x5);
    }
    BresenhamLine(_0x2b3ceb[0x0], _0x2b3ceb[0x1], _0x2b3ceb[0x0], -divWork['height'] / 0x2 + 0x14, '#ffff00', 0x1);
    if (cnt % 0x2 != 0x0) {
        divFootHint['html']('有' + cnt + _0x51c1('0x42'));
    } else {
        divFootHint['html']('有' + cnt + '个交点，为偶数，检查点判别在多边形外部');
    }
}

function IsOneSide(_0x480ce2, _0x3181cb) {
    x0 = _0x3181cb[0x0], y0 = _0x3181cb[0x1], x1 = _0x3181cb[0x2], y1 = _0x3181cb[0x3];
    if (x0 > _0x480ce2 && x1 > _0x480ce2) return !![];
    if (x0 < _0x480ce2 && x1 < _0x480ce2) return !![];
    return ![];
}

function panelexitproc() {
    divpanel1[_0x51c1('0x6d')]();
    divpanel1 = null;
    divWork['mouseClicked']();
    sliderR = null;
    sliderG = null;
    sliderB = null;
    noLoop();
}

function SuHodgproc() {
    var _0x4ab636 = [];
    for (var _0x309fd6 = 0x0; _0x309fd6 < pt.length; _0x309fd6++) {
        _0x4ab636['push']([pt[_0x309fd6][0x0], pt[_0x309fd6][0x1]]);
    }
    var _0x483eb5 = [];
    if (rectpt[_0x51c1('0x1c')] == 0x2) {
        _0x483eb5['push']([rectpt[0x0][0x0], rectpt[0x0][0x1]]);
        _0x483eb5[_0x51c1('0x7b')]([rectpt[0x0][0x0], rectpt[0x1][0x1]]);
        _0x483eb5['push']([rectpt[0x1][0x0], rectpt[0x1][0x1]]);
        _0x483eb5[_0x51c1('0x7b')]([rectpt[0x1][0x0], rectpt[0x0][0x1]]);
    } else {
        _0x483eb5['push']([0x140, 0x0]);
        _0x483eb5[_0x51c1('0x7b')]([0x140, 0xf0]);
        _0x483eb5['push']([0x28, 0xf0]);
        _0x483eb5[_0x51c1('0x7b')]([0x28, 0x0]);
    }
    drawPoly(_0x4ab636, _0x51c1('0xd'));
    drawPoly(_0x483eb5, '#ffff00');
    var _0x268aa7 = Sutherland_Hodgman(_0x4ab636, _0x483eb5);
    drawPoly(_0x268aa7, '#00ff00', 0x3);
}

function Sutherland_Hodgman(_0x19f0e6, _0x526067) {
    var _0x1089eb, _0x55915b;
    var _0x4c2bbc;
    var _0x561f79, _0x55002c;
    var _0x4c61b0;
    _0x4c2bbc = _0x19f0e6['length'];
    _0x1089eb = _0x19f0e6[_0x4c2bbc - 0x1];
    _0x55915b = _0x19f0e6[0x0];
    for (i = 0x0; i < _0x526067[_0x51c1('0x1c')]; i++) {
        if (i == _0x526067['length'] - 0x1) clipline = [_0x526067[i], _0x526067[0x0]]; else clipline = [_0x526067[i], _0x526067[i + 0x1]];
        _0x4c61b0 = edgeClip(_0x19f0e6, clipline);
        _0x19f0e6 = _0x4c61b0;
    }
    drawPoly(_0x19f0e6, _0x51c1('0x6'), 0x3);
}

function edgeClip(_0x26e2f1, _0x414909) {
    cnt = _0x26e2f1[_0x51c1('0x1c')];
    var _0x28ed21, _0x4e42ae;
    var _0x4b2736 = [];
    _0x28ed21 = _0x26e2f1[cnt - 0x1];
    for (j = 0x0; j < cnt; j++) {
        _0x4e42ae = _0x26e2f1[j];
        flagS = IsInside(_0x28ed21, _0x414909);
        flagP = IsInside(_0x4e42ae, _0x414909);
        if (flagS == !![] && flagP == !![]) {
            _0x4b2736[_0x51c1('0x7b')](_0x4e42ae);
        }
        if (flagS == ![] && flagP == ![]) {
        }
        if (flagS == !![] && flagP == ![]) {
            Pxy = Solve([_0x28ed21, _0x4e42ae], _0x414909);
            _0x4b2736[_0x51c1('0x7b')](Pxy);
        }
        if (flagS == ![] && flagP == !![]) {
            Pxy = Solve([_0x28ed21, _0x4e42ae], _0x414909);
            _0x4b2736['push'](Pxy);
            _0x4b2736[_0x51c1('0x7b')](_0x4e42ae);
        }
        _0x28ed21 = _0x4e42ae;
    }
    return _0x4b2736;
}

function IsInside(_0x27359c, _0x236a34) {
    ret = AxB(_0x27359c, _0x236a34[0x0], _0x236a34[0x1]);
    return ret >= 0x0 ? !![] : ![];
}

function AxB(_0x567055, _0x630443, _0x28a964) {
    val = (_0x630443[0x0] - _0x567055[0x0]) * (_0x28a964[0x1] - _0x567055[0x1]) - (_0x28a964[0x0] - _0x567055[0x0]) * (_0x630443[0x1] - _0x567055[0x1]);
    return val;
}

function Solve(_0x1a1a93, _0x586317) {
    var _0x5d588c, _0x39bc75, _0x4ae904, _0x32d726;
    x00 = _0x1a1a93[0x0][0x0];
    y00 = _0x1a1a93[0x0][0x1];
    x01 = _0x1a1a93[0x1][0x0];
    y01 = _0x1a1a93[0x1][0x1];
    x10 = _0x586317[0x0][0x0];
    y10 = _0x586317[0x0][0x1];
    x11 = _0x586317[0x1][0x0];
    y11 = _0x586317[0x1][0x1];
    var _0x114a9a = (y01 - y00) * (x11 - x10) - (x00 - x01) * (y10 - y11);
    if (_0x114a9a == 0x0) {
        return ![];
    }
    var _0x1a92df = ((x01 - x00) * (x11 - x10) * (y10 - y00) + (y01 - y00) * (x11 - x10) * x00 - (y11 - y10) * (x01 - x00) * x10) / _0x114a9a;
    var _0x2583f8 = -((y01 - y00) * (y11 - y10) * (x10 - x00) + (x01 - x00) * (y11 - y10) * y00 - (x11 - x10) * (y01 - y00) * y10) / _0x114a9a;
    return [_0x1a92df, _0x2583f8];
}

function SolveX(_0x337441, _0x5ead0d) {
    x0 = _0x5ead0d[0x0], y0 = _0x5ead0d[0x1], x1 = _0x5ead0d[0x2], y1 = _0x5ead0d[0x3];
    k = (y1 - y0) / (x1 - x0);
    y = k * (_0x337441 - x0) + y0;
    return y;
}

function CohenSutherlandproc() {
    stroke(255);
    var _0x2687e0, _0x41eb3a, _0x141ce6, _0x5a298a;
    if (rectpt[_0x51c1('0x1c')] == 0x2) {
        _0x2687e0 = rectpt[0x0][0x0];
        _0x41eb3a = rectpt[0x1][0x0];
        _0x141ce6 = rectpt[0x1][0x1];
        _0x5a298a = rectpt[0x0][0x1];
    } else {
        return;
    }
    noFill();
    drawClipRect(_0x2687e0, _0x141ce6, _0x41eb3a, _0x5a298a, '#ff0000');
    drawClipLines(pt, _0x51c1('0x24'));
    for (i = 0x0; i < pt.length - 0x1; i++) {
        CoSuClip(pt[i][0x0], pt[i][0x1], pt[i + 0x1][0x0], pt[i + 0x1][0x1], _0x2687e0, _0x41eb3a, _0x141ce6, _0x5a298a);
    }
    CoSuClip(pt[i][0x0], pt[i][0x1], pt[0x0][0x0], pt[0x0][0x1], _0x2687e0, _0x41eb3a, _0x141ce6, _0x5a298a);
}

function drawClipLines(_0x2c3dff, _0x7ec72c) {
    for (i = 0x0; i < _0x2c3dff[_0x51c1('0x1c')] - 0x1; i++) {
        xoyLine(_0x2c3dff[i][0x0], _0x2c3dff[i][0x1], _0x2c3dff[i + 0x1][0x0], _0x2c3dff[i + 0x1][0x1], _0x51c1('0x24'));
    }
    xoyLine(_0x2c3dff[i][0x0], _0x2c3dff[i][0x1], _0x2c3dff[0x0][0x0], _0x2c3dff[0x0][0x1], '#ffff00');
}

function drawClipRect(_0x2452f1, _0x5d433a, _0x17459a, _0x327bdb, _0x33856a) {
    xoyRect(_0x2452f1, _0x5d433a, _0x17459a, _0x327bdb, _0x33856a);
}

function xoyRect(_0x2184ef, _0x3ac430, _0x1ae0f0, _0x3b321b, _0x3b3c68) {
    stroke(_0x3b3c68);
    strokeWeight(0x1);
    rect(oX + _0x2184ef, oY - _0x3ac430, _0x1ae0f0 - _0x2184ef + 0x1, _0x3ac430 - _0x3b321b + 0x1);
}

function xoyLine(_0x25904b, _0x445182, _0x524048, _0x27a418, _0xdb65de) {
    stroke(_0xdb65de);
    line(oX + _0x25904b, oY - _0x445182, oX + _0x524048, oY - _0x27a418);
}

function encode4(_0x4f3a2f, _0x3b5741, _0x10ca16, _0x362a90, _0x484fa3, _0x4c64e3) {
    const _0x512786 = 0x1, _0x56248c = 0x2, _0x5411fd = 0x4, _0x374252 = 0x8;
    var _0x34229b = 0x0;
    if (_0x4f3a2f < _0x10ca16) _0x34229b |= _0x512786;
    if (_0x4f3a2f > _0x362a90) _0x34229b |= _0x56248c;
    if (_0x3b5741 < _0x484fa3) _0x34229b |= _0x5411fd;
    if (_0x3b5741 > _0x4c64e3) _0x34229b |= _0x374252;
    return _0x34229b;
}

function CoSuClip(_0x541da8, _0x17a1a6, _0x17276b, _0x3d5979, _0x4d3ef6, _0x31f93a, _0x223028, _0x5791a7) {
    var _0x5c969c, _0x55f9d3, _0x4e66ff;
    const _0x354bd3 = 0x1, _0x536a90 = 0x2, _0x37eb46 = 0x4, _0x5c6512 = 0x8;
    _0x5c969c = encode4(_0x541da8, _0x17a1a6, _0x4d3ef6, _0x31f93a, _0x223028, _0x5791a7);
    _0x55f9d3 = encode4(_0x17276b, _0x3d5979, _0x4d3ef6, _0x31f93a, _0x223028, _0x5791a7);
    while (_0x5c969c != 0x0 || _0x55f9d3 != 0x0) {
        if ((_0x5c969c & _0x55f9d3) != 0x0) {
            return;
        }
        if (_0x5c969c != 0x0) {
            _0x4e66ff = _0x5c969c;
        } else {
            _0x4e66ff = _0x55f9d3;
        }
        if ((_0x354bd3 & _0x4e66ff) != 0x0) {
            x = _0x4d3ef6;
            y = _0x17a1a6 + (_0x3d5979 - _0x17a1a6) * (_0x4d3ef6 - _0x541da8) / (_0x17276b - _0x541da8);
        } else if ((_0x536a90 & _0x4e66ff) != 0x0) {
            x = _0x31f93a;
            y = _0x17a1a6 + (_0x3d5979 - _0x17a1a6) * (_0x31f93a - _0x541da8) / (_0x17276b - _0x541da8);
        } else if ((_0x37eb46 & _0x4e66ff) != 0x0) {
            y = _0x223028;
            x = _0x541da8 + (_0x17276b - _0x541da8) * (_0x223028 - _0x17a1a6) / (_0x3d5979 - _0x17a1a6);
        } else if ((_0x5c6512 & _0x4e66ff) != 0x0) {
            y = _0x5791a7;
            x = _0x541da8 + (_0x17276b - _0x541da8) * (_0x5791a7 - _0x17a1a6) / (_0x3d5979 - _0x17a1a6);
        }
        if (_0x4e66ff == _0x5c969c) {
            _0x541da8 = x;
            _0x17a1a6 = y;
            _0x5c969c = encode4(x, y, _0x4d3ef6, _0x31f93a, _0x223028, _0x5791a7);
        } else {
            _0x17276b = x;
            _0x3d5979 = y;
            _0x55f9d3 = encode4(x, y, _0x4d3ef6, _0x31f93a, _0x223028, _0x5791a7);
        }
    }
    strokeWeight(0x5);
    xoyLine(_0x541da8, _0x17a1a6, _0x17276b, _0x3d5979, '#0000ff');
}

function scanPolyFillproc() {
    var _0x37fd7c, _0x41a3a6;
    var _0x1d2a34 = calcRect(pt);
    var _0x5846c7 = [];
    _0x37fd7c = _0x1d2a34[0x1];
    _0x41a3a6 = _0x1d2a34[0x3];
    var _0x3265ee = pt.length;
    for (var _0x557c7a = 0x0; _0x557c7a < _0x3265ee - 0x1; _0x557c7a++) {
        _0x5846c7['push']([pt[_0x557c7a][0x0], pt[_0x557c7a][0x1], pt[_0x557c7a + 0x1][0x0], pt[_0x557c7a + 0x1][0x1]]);
    }
    _0x5846c7[_0x51c1('0x7b')]([pt[_0x3265ee - 0x1][0x0], pt[_0x3265ee - 0x1][0x1], pt[0x0][0x0], pt[0x0][0x1]]);
    var _0x1a21dd = [], _0x21ad50;
    lncnt = _0x5846c7[_0x51c1('0x1c')];
    for (var _0x29f1e8 = _0x37fd7c; _0x29f1e8 < _0x41a3a6; _0x29f1e8++) {
        for (var _0x557c7a = 0x0; _0x557c7a < lncnt; _0x557c7a++) {
            if (judgeCross(_0x5846c7[_0x557c7a], _0x29f1e8)) {
                _0x21ad50 = getXRoot(_0x5846c7[_0x557c7a], _0x29f1e8);
                _0x1a21dd[_0x51c1('0x7b')](Math[_0x51c1('0x2')](_0x21ad50));
            }
        }
        _0x1a21dd['sort'](function (_0x2686ea, _0x301161) {
            return _0x2686ea - _0x301161;
        });
        if (_0x1a21dd[_0x51c1('0x1c')] >= 0x3 && _0x1a21dd['length'] % 0x2 == 0x1) {
            _0x1a21dd = distinct(_0x1a21dd);
        }
        var _0x192aa4 = int(_0x1a21dd[_0x51c1('0x1c')] / 0x2);
        for (var _0x557c7a = 0x0; _0x557c7a < _0x192aa4; _0x557c7a++) {
            BresenhamLine(_0x1a21dd[_0x557c7a * _0x192aa4], _0x29f1e8, _0x1a21dd[_0x557c7a * _0x192aa4 + 0x1], _0x29f1e8, '#80000080');
        }
        _0x1a21dd[_0x51c1('0x1c')] = 0x0;
    }
}

function distinct(_0x5b9bf8) {
    return Array[_0x51c1('0x41')](new Set(_0x5b9bf8));
}



function calcRect(_0x11970d) {
    cnt = _0x11970d['length'];
    xmin = 0x2710, xmax = -0x2710, ymin = 0x2710, ymax = -0x2710;
    for (i = 0x0; i < cnt; i++) {
        x = _0x11970d[i][0x0];
        y = _0x11970d[i][0x1];
        if (x < xmin) {
            xmin = x;
        }
        if (y < ymin) {
            ymin = y;
        }
        if (x >= xmax) {
            xmax = x;
        }
        if (y >= ymax) {
            ymax = y;
        }
    }
    return [xmin, ymin, xmax, ymax];
}

function drawRect(_0x41568c, _0x4afea2, _0x37990b, _0x46120f, _0x38301b) {
    var _0x17b6f3 = [[_0x41568c, _0x4afea2], [_0x41568c, _0x46120f], [_0x37990b, _0x46120f], [_0x37990b, _0x4afea2]];
    drawPoly(_0x17b6f3, _0x38301b);
}

function getXRoot(_0x55bdd4, _0x210a91) {
    x0 = _0x55bdd4[0x0], y0 = _0x55bdd4[0x1];
    x1 = _0x55bdd4[0x2], y1 = _0x55bdd4[0x3];
    if (x1 == x0) {
        return x0;
    }
    k = (y1 - y0) / (x1 - x0);
    b = y0 - k * x0;
    x = (_0x210a91 - b) / k;
    return x;
}

function judgeCross(_0x47507f, _0x54c754) {
    p0y = _0x47507f[0x1];
    p1y = _0x47507f[0x3];
    if ((p0y - _0x54c754) * (p1y - _0x54c754) <= 0x0) {
        return !![];
    }
    return ![];
}

function drawPoly(_0x26affd, _0xb28ada, _0x4a62fe) {
    pcnt = _0x26affd['length'];
    p0 = _0x26affd[0x0];
    for (var _0x5bdf27 = 0x1; _0x5bdf27 < pcnt; _0x5bdf27++) {
        p1 = _0x26affd[_0x5bdf27];
        BresenhamLine(p0[0x0], p0[0x1], p1[0x0], p1[0x1], _0xb28ada, _0x4a62fe);
        p0 = p1;
    }
    p1 = _0x26affd[0x0];
    BresenhamLine(p0[0x0], p0[0x1], p1[0x0], p1[0x1], _0xb28ada, _0x4a62fe);
}

function drawPolyproc() {
    var cnt;
    var _0x1127bc;
    var _0x15856d;
    cnt = pt.length;
    if (cnt < 0x3) {
        divHint['html']('<3个点');
        return;
    }
    divHint[_0x51c1('0x27')]('共' + cnt + '个点');
    var _0x2e4934 = [];
    for (var _0x1c9b6f = 0x0; _0x1c9b6f < pt.length; _0x1c9b6f++) {
        _0x2e4934['push']([pt[_0x1c9b6f][0x0], pt[_0x1c9b6f][0x1]]);
    }
    drawPoly(_0x2e4934, _0x51c1('0xd'));
}






function xoyDrawArrowLine(_0x47be12, _0x17341c, _0x4931f6) {
    _0x47be12[0x0] = _0x47be12[0x0] + oX;
    _0x47be12[0x1] = oY - _0x47be12[0x1];
    _0x17341c[0x0] = _0x17341c[0x0] + oX;
    _0x17341c[0x1] = oY - _0x17341c[0x1];
    drawArrowLine(_0x47be12, _0x17341c, _0x4931f6);
}

function ddaproc() {
    var _0x49506f;
    var _0x27a0c6;
    _0x49506f = pt[_0x51c1('0x1c')];
    if (_0x49506f < 0x2) {
        divHint['html']('<2个点');
        return;
    }
    divHint['html']('共' + _0x49506f + '个点');
    for (var _0x29ac63 = 0x0; _0x29ac63 < _0x49506f - 0x1; _0x29ac63++) {
        color = _0x51c1('0xd');
        DDALine(pt[_0x29ac63][0x0], pt[_0x29ac63][0x1], pt[_0x29ac63 + 0x1][0x0], pt[_0x29ac63 + 0x1][0x1], color, 0x1);
    }
}

function MidCircleproc() {
    var _0x19fb1e;
    var _0x5c00dd;
    _0x19fb1e = pt.length;
    if (_0x19fb1e < 0x2) {
        divHint['html']('<2个点');
        return;
    }
    divHint['html']('共' + _0x19fb1e + '个点');
    for (var _0x25411f = 0x0; _0x25411f < _0x19fb1e - 0x1; _0x25411f++) {
        color = '#ff0000';
        r = Math[_0x51c1('0x5d')]((pt[_0x25411f][0x0] - pt[_0x25411f + 0x1][0x0]) * (pt[_0x25411f][0x0] - pt[_0x25411f + 0x1][0x0]) + (pt[_0x25411f][0x1] - pt[_0x25411f + 0x1][0x1]) * (pt[_0x25411f][0x1] - pt[_0x25411f + 0x1][0x1]));
        r = int(r);
        MidCircle(pt[_0x25411f][0x0], pt[_0x25411f][0x1], r, color, 0x1);
    }
}

function Bresenhamproc() {
    var _0x1bc753;
    var _0x4d7e81;
    _0x1bc753 = pt.length;
    if (_0x1bc753 < 0x2) {
        divHint['html']('<2个点');
        return;
    }
    divHint[_0x51c1('0x27')]('共' + _0x1bc753 + '个点');
    for (var _0x41e37e = 0x0; _0x41e37e < _0x1bc753 - 0x1; _0x41e37e++) {
        color = _0x51c1('0xd');
        BresenhamLine(pt[_0x41e37e][0x0], pt[_0x41e37e][0x1], pt[_0x41e37e + 0x1][0x0], pt[_0x41e37e + 0x1][0x1], color, 0x1);
    }
}

function genFreePtProc() {
    this['style'](_0x51c1('0x55'), '#d06060');
    pnlbtn1['style']('background-color', '#50f7f0');
    divWork[_0x51c1('0x13')](divWorkfreeptclickproc);
}

function genRectPtProc() {
    pnlbtn0[_0x51c1('0x1e')]('background-color', _0x51c1('0x7d'));
    this[_0x51c1('0x1e')]('background-color', '#d06060');
    divWork[_0x51c1('0x13')](divWorkrectclickproc);
}

function divWorkfreeptclickproc() {
    xy = [int(mouseX - oX), int(oY - mouseY)];
    pt['push'](xy);
    xoySetPixel(xy[0x0], xy[0x1], _0x51c1('0xd'), 0x5);
    biaozhu('p' + pt.length, xy[0x0] + 0x3, xy[0x1] - 0x3);
}

function divWorkrectclickproc() {
    xy = [int(mouseX - oX), int(oY - mouseY)];
    if (rectpt[_0x51c1('0x1c')] >= 0x2) {
        alert(_0x51c1('0x2c'));
        return;
    }
    rectpt['push'](xy);
    xoySetPixel(xy[0x0], xy[0x1], _0x51c1('0x24'), 0x5);
    biaozhu(_0x51c1('0x20') + rectpt[_0x51c1('0x1c')], xy[0x0] + 0x3, xy[0x1] - 0x3);
    if (rectpt[_0x51c1('0x1c')] == 0x2) {
        var _0x16640f = [];
        _0x16640f['push']([rectpt[0x0][0x0], rectpt[0x0][0x1]]);
        _0x16640f['push']([rectpt[0x0][0x0], rectpt[0x1][0x1]]);
        _0x16640f['push']([rectpt[0x1][0x0], rectpt[0x1][0x1]]);
        _0x16640f['push']([rectpt[0x1][0x0], rectpt[0x0][0x1]]);
        drawPoly(_0x16640f, '#ffff00', 0x1);
    }
}
//
function biaozhu(_0x2f9628, _0x4aa945, _0x2a0760) {
    var _0x1a0ca7 = createCommonDiv(divWork, 'biaozhu' + _0x2f9628, 0x14, 0x10, _0x4aa945 + oX, oY - _0x2a0760, '#ff00f000');
    _0x1a0ca7['style'](_0x51c1('0x43'), _0x51c1('0x3f'));
    _0x1a0ca7['style']('font-size', _0x51c1('0x5a'));
    _0x1a0ca7[_0x51c1('0x27')](_0x2f9628);
}

function DDALine(_0x52833a, _0x5f2ba7, _0x2c026f, _0xa4aefe, _0x52fbf7, _0x2fe3d2) {
    var _0x18cbe4 = _0x2c026f - _0x52833a;
    var _0x389c5e = _0xa4aefe - _0x5f2ba7;
    var _0x52d672, _0x4087d5, _0x547a11, _0x75297d, _0x4460db, _0x188ebe, _0xe1bef1, _0x2fb8aa, _0x3e2081;
    if (Math['abs'](_0x18cbe4) > Math['abs'](_0x389c5e)) {
        _0x52d672 = _0x389c5e / _0x18cbe4;
        if (_0x2c026f > _0x52833a) {
            _0x75297d = _0x52833a;
            _0x188ebe = _0x2c026f;
            _0x547a11 = _0x5f2ba7;
            for (_0x4087d5 = _0x75297d; _0x4087d5 <= _0x188ebe; _0x4087d5++) {
                _0x3e2081 = int(_0x547a11 + 0.5);
                xoySetPixel(_0x4087d5, _0x3e2081, _0x52fbf7, _0x2fe3d2);
                _0x547a11 = _0x547a11 + _0x52d672;
            }
        }
        if (_0x52833a > _0x2c026f) {
            _0x75297d = _0x2c026f;
            _0x188ebe = _0x52833a;
            _0x547a11 = _0xa4aefe;
            for (_0x4087d5 = _0x75297d; _0x4087d5 <= _0x188ebe; _0x4087d5++) {
                _0x3e2081 = int(_0x547a11 + 0.5);
                xoySetPixel(_0x4087d5, _0x3e2081, _0x52fbf7, _0x2fe3d2);
                _0x547a11 = _0x547a11 + _0x52d672;
            }
        }
    }
    if (Math['abs'](_0x389c5e) > Math['abs'](_0x18cbe4)) {
        _0x52d672 = _0x18cbe4 / _0x389c5e;
        if (_0xa4aefe > _0x5f2ba7) {
            _0x4460db = _0x5f2ba7;
            _0xe1bef1 = _0xa4aefe;
            _0x4087d5 = _0x52833a;
            for (_0x547a11 = _0x4460db; _0x547a11 <= _0xe1bef1; _0x547a11++) {
                _0x2fb8aa = int(_0x4087d5 + 0.5);
                xoySetPixel(_0x2fb8aa, _0x547a11, _0x52fbf7, _0x2fe3d2);
                _0x4087d5 = _0x4087d5 + _0x52d672;
            }
        }
        if (_0x5f2ba7 > _0xa4aefe) {
            _0x4460db = _0xa4aefe;
            _0xe1bef1 = _0x5f2ba7;
            _0x4087d5 = _0x2c026f;
            for (_0x547a11 = _0x4460db; _0x547a11 <= _0xe1bef1; _0x547a11++) {
                _0x2fb8aa = int(_0x4087d5 + 0.5);
                xoySetPixel(_0x2fb8aa, _0x547a11, _0x52fbf7, _0x2fe3d2);
                _0x4087d5 = _0x4087d5 + _0x52d672;
            }
        }
    }
}

function MidLine(_0x455bd7, _0x2e3235, _0x3be95a, _0x26563f, _0x4a59ec, _0x44f61f) {
    var _0x10aa7c;
    var _0x3be39b;
    var _0x4e954b, _0x101f33;
    if (_0x455bd7 > _0x3be95a) {
        _0x4e954b = _0x3be95a;
        _0x101f33 = _0x26563f;
        _0x3be95a = _0x455bd7;
        _0x26563f = _0x2e3235;
        _0x455bd7 = _0x4e954b;
        _0x2e3235 = _0x101f33;
    }
    _0x10aa7c = _0x3be95a - _0x455bd7;
    _0x3be39b = _0x26563f - _0x2e3235;
    var _0x27f8d7 = _0x10aa7c * _0x3be39b;
    if (_0x27f8d7 < 0x0) {
        _0x455bd7 = -_0x455bd7;
        _0x2e3235 = _0x2e3235;
        _0x3be95a = -_0x3be95a;
        _0x26563f = _0x26563f;
        if (_0x455bd7 > _0x3be95a) {
            _0x4e954b = _0x3be95a;
            _0x101f33 = _0x26563f;
            _0x3be95a = _0x455bd7;
            _0x26563f = _0x2e3235;
            _0x455bd7 = _0x4e954b;
            _0x2e3235 = _0x101f33;
        }
    }
    var _0xb9a422;
    if (Math['abs'](_0x10aa7c) > Math[_0x51c1('0x50')](_0x3be39b) && _0x3be95a > _0x455bd7) {
        _0xb9a422 = MidLinek1data(_0x455bd7, _0x2e3235, _0x3be95a, _0x26563f);
        if (_0x27f8d7 < 0x0) {
            for (var _0x5d891a = 0x0; _0x5d891a < _0xb9a422[_0x51c1('0x1c')]; _0x5d891a++) xoySetPixel(-_0xb9a422[_0x5d891a][0x0], _0xb9a422[_0x5d891a][0x1], _0x4a59ec, _0x44f61f);
        }
        if (_0x27f8d7 > 0x0) {
            for (var _0x5d891a = 0x0; _0x5d891a < _0xb9a422['length']; _0x5d891a++) xoySetPixel(_0xb9a422[_0x5d891a][0x0], _0xb9a422[_0x5d891a][0x1], _0x4a59ec, _0x44f61f);
        }
    }
    if (Math[_0x51c1('0x50')](_0x3be39b) > Math['abs'](_0x10aa7c) && _0x3be95a > _0x455bd7) {
        xn0 = _0x2e3235;
        yn0 = _0x455bd7;
        xn1 = _0x26563f;
        yn1 = _0x3be95a;
        _0xb9a422 = MidLinek1data(xn0, yn0, xn1, yn1);
        if (_0x27f8d7 < 0x0) {
            for (var _0x5d891a = 0x0; _0x5d891a < _0xb9a422['length']; _0x5d891a++) xoySetPixel(-_0xb9a422[_0x5d891a][0x1], _0xb9a422[_0x5d891a][0x0], _0x4a59ec, _0x44f61f);
        }
        if (_0x27f8d7 > 0x0) {
            for (var _0x5d891a = 0x0; _0x5d891a < _0xb9a422['length']; _0x5d891a++) xoySetPixel(_0xb9a422[_0x5d891a][0x1], _0xb9a422[_0x5d891a][0x0], _0x4a59ec, _0x44f61f);
        }
    }
}

function MidLinek1data(_0x1a3421, _0x58a610, _0x30f0b8, _0x31b60c) {
    var _0x1dbe07 = _0x58a610 - _0x31b60c;
    var _0x5cf73c = _0x30f0b8 - _0x1a3421;
    var _0x5e7478 = [];
    d = 0x2 * _0x1dbe07 + _0x5cf73c;
    d1 = 0x2 * _0x1dbe07;
    d2 = 0x2 * (_0x1dbe07 + _0x5cf73c);
    x = _0x1a3421;
    y = _0x58a610;
    _0x5e7478['push']([x, y]);
    while (x < _0x30f0b8) {
        if (d < 0x0) {
            x++;
            y++;
            d += d2;
        } else {
            x++;
            d += d1;
        }
        _0x5e7478[_0x51c1('0x7b')]([x, y]);
    }
    return _0x5e7478;
}

function BresenhamLine(_0x122d82, _0x510759, _0x41ba5d, _0x15ef0c, _0x344c31, _0x32d5b3) {
    var _0x14223a;
    var _0x115d32;
    var _0x379495, _0x4e009c;
    if (_0x122d82 == _0x41ba5d) {
        if (_0x510759 > _0x15ef0c) for (var _0x116083 = _0x15ef0c; _0x116083 < _0x510759; _0x116083++) xoySetPixel(_0x122d82, _0x116083, _0x344c31, _0x32d5b3);
        if (_0x510759 < _0x15ef0c) for (var _0x116083 = _0x510759; _0x116083 < _0x15ef0c; _0x116083++) xoySetPixel(_0x122d82, _0x116083, _0x344c31, _0x32d5b3);
        return;
    }
    if (_0x510759 == _0x15ef0c) {
        if (_0x122d82 > _0x41ba5d) for (var _0x116083 = _0x41ba5d; _0x116083 < _0x122d82; _0x116083++) xoySetPixel(_0x116083, _0x510759, _0x344c31, _0x32d5b3);
        if (_0x122d82 < _0x41ba5d) for (var _0x116083 = _0x122d82; _0x116083 < _0x41ba5d; _0x116083++) xoySetPixel(_0x116083, _0x510759, _0x344c31, _0x32d5b3);
        return;
    }
    if (_0x122d82 > _0x41ba5d) {
        _0x379495 = _0x41ba5d;
        _0x4e009c = _0x15ef0c;
        _0x41ba5d = _0x122d82;
        _0x15ef0c = _0x510759;
        _0x122d82 = _0x379495;
        _0x510759 = _0x4e009c;
    }
    _0x14223a = _0x41ba5d - _0x122d82;
    _0x115d32 = _0x15ef0c - _0x510759;
    var _0x1469e0 = _0x14223a * _0x115d32;
    if (_0x1469e0 < 0x0) {
        _0x122d82 = -_0x122d82;
        _0x510759 = _0x510759;
        _0x41ba5d = -_0x41ba5d;
        _0x15ef0c = _0x15ef0c;
        if (_0x122d82 > _0x41ba5d) {
            _0x379495 = _0x41ba5d;
            _0x4e009c = _0x15ef0c;
            _0x41ba5d = _0x122d82;
            _0x15ef0c = _0x510759;
            _0x122d82 = _0x379495;
            _0x510759 = _0x4e009c;
        }
    }
    var _0xf41e42;
    if (Math['abs'](_0x14223a) > Math[_0x51c1('0x50')](_0x115d32) && _0x41ba5d > _0x122d82) {
        _0xf41e42 = Bresenhamk1data(_0x122d82, _0x510759, _0x41ba5d, _0x15ef0c);
        if (_0x1469e0 < 0x0) {
            for (var _0x116083 = 0x0; _0x116083 < _0xf41e42[_0x51c1('0x1c')]; _0x116083++) xoySetPixel(-_0xf41e42[_0x116083][0x0], _0xf41e42[_0x116083][0x1], _0x344c31, _0x32d5b3);
        }
        if (_0x1469e0 > 0x0) {
            for (var _0x116083 = 0x0; _0x116083 < _0xf41e42[_0x51c1('0x1c')]; _0x116083++) xoySetPixel(_0xf41e42[_0x116083][0x0], _0xf41e42[_0x116083][0x1], _0x344c31, _0x32d5b3);
        }
    }
    if (Math['abs'](_0x115d32) > Math[_0x51c1('0x50')](_0x14223a) && _0x41ba5d > _0x122d82) {
        xn0 = _0x510759;
        yn0 = _0x122d82;
        xn1 = _0x15ef0c;
        yn1 = _0x41ba5d;
        _0xf41e42 = Bresenhamk1data(xn0, yn0, xn1, yn1);
        if (_0x1469e0 < 0x0) {
            for (var _0x116083 = 0x0; _0x116083 < _0xf41e42[_0x51c1('0x1c')]; _0x116083++) xoySetPixel(-_0xf41e42[_0x116083][0x1], _0xf41e42[_0x116083][0x0], _0x344c31, _0x32d5b3);
        }
        if (_0x1469e0 > 0x0) {
            for (var _0x116083 = 0x0; _0x116083 < _0xf41e42[_0x51c1('0x1c')]; _0x116083++) xoySetPixel(_0xf41e42[_0x116083][0x1], _0xf41e42[_0x116083][0x0], _0x344c31, _0x32d5b3);
        }
    }
}

function Bresenhamk1data(_0x536a6d, _0x1fe813, _0x566d0c, _0xca2d6b) {
    var _0x5d3dd3, _0x3f1bed;
    var _0x4b3dcf = [];
    _0x5d3dd3 = _0x566d0c - _0x536a6d;
    _0x3f1bed = _0xca2d6b - _0x1fe813;
    e = -_0x5d3dd3;
    x = _0x536a6d;
    y = _0x1fe813;
    for (i = 0x0; i <= _0x5d3dd3; i++) {
        _0x4b3dcf[_0x51c1('0x7b')]([x, y]);
        x++;
        e = e + 0x2 * _0x3f1bed;
        if (e >= 0x0) {
            y++;
            e = e - 0x2 * _0x5d3dd3;
        }
    }
    return _0x4b3dcf;
}

function MidCircle(_0x56a2e7, _0x395abe, _0x5f1621, _0x712a1e, _0x337f1a) {
    var _0x218527, _0x3bd49a, _0x3ec7a0;
    _0x218527 = MidCircledata(_0x5f1621);
    for (var _0x2c7eea = 0x0; _0x2c7eea < _0x218527['length']; _0x2c7eea++) {
        _0x3bd49a = _0x218527[_0x2c7eea][0x0];
        _0x3ec7a0 = _0x218527[_0x2c7eea][0x1];
        xoySetPixel(_0x3bd49a + _0x56a2e7, _0x3ec7a0 + _0x395abe, _0x712a1e, _0x337f1a);
        xoySetPixel(_0x3ec7a0 + _0x56a2e7, _0x3bd49a + _0x395abe, _0x712a1e, _0x337f1a);
        xoySetPixel(-_0x3bd49a + _0x56a2e7, _0x3ec7a0 + _0x395abe, _0x712a1e, _0x337f1a);
        xoySetPixel(_0x3ec7a0 + _0x56a2e7, -_0x3bd49a + _0x395abe, _0x712a1e, _0x337f1a);
        xoySetPixel(_0x3bd49a + _0x56a2e7, -_0x3ec7a0 + _0x395abe, _0x712a1e, _0x337f1a);
        xoySetPixel(-_0x3ec7a0 + _0x56a2e7, _0x3bd49a + _0x395abe, _0x712a1e, _0x337f1a);
        xoySetPixel(-_0x3bd49a + _0x56a2e7, -_0x3ec7a0 + _0x395abe, _0x712a1e, _0x337f1a);
        xoySetPixel(-_0x3ec7a0 + _0x56a2e7, -_0x3bd49a + _0x395abe, _0x712a1e, _0x337f1a);
    }
}

function MidCircledata(_0x4c21a2) {
    var _0x26a66d = [];
    var _0x157117 = 0x0;
    var _0x31c465 = _0x4c21a2;
    var _0x469557 = 0x3 - 0x2 * _0x4c21a2;
    _0x26a66d['push']([_0x157117, _0x31c465]);
    while (_0x157117 <= _0x31c465) {
        if (_0x469557 < 0x0) {
            _0x469557 += 0x2 * _0x157117 + 0x3;
        } else {
            _0x469557 += 0x2 * (_0x157117 - _0x31c465) + 0x5;
            _0x31c465--;
        }
        _0x157117++;
        _0x26a66d['push']([_0x157117, _0x31c465]);
    }
    return _0x26a66d;
}

function xoySetPixel(_0x321d55, _0xce5d39, _0x341a97, _0x1aa8b3) {
    setPixel(_0x321d55 + oX, oY - _0xce5d39, _0x341a97, _0x1aa8b3);
}

function xoyGetPixel(_0x515bcf, _0x2571e8) {
    var _0x14c4d4;
    _0x14c4d4 = get(_0x515bcf + oX, oY - _0x2571e8);
    return [_0x14c4d4[0x0], _0x14c4d4[0x1], _0x14c4d4[0x2], _0x14c4d4[0x3]];
}

function rndColor() {
    var r, g, b, clr;
    r = int(Math.random() * 255);
    g = int(Math.random() * 255);
    b = int(Math['random']() * 255);
    clr = 'rgb(' + r + ',' + g + ',' + b + ')';
    return clr;
}