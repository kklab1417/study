    #include<stdio.h>
    #include<stdlib.h>
    
    #define MaxSize 200
    
    typedef struct Node//结构体  
    {
    	char data;
    	struct Node *LChild;
    	struct Node *RChild;
    } BiTNode,*BiTree;
    
    void InitList(BiTree &l)//初始化
    {
    l= (BiTree)malloc(sizeof(BiTNode));
    l->LChild = NULL;
    l->RChild = NULL;
    }
    
    void CreateBiTree(BiTree &bt) //先序创建二叉树 
    {
    	char ch;
    	ch = getchar();
    	if (ch == '#') bt = NULL;
    	else
    	{
    		bt = (BiTree)malloc(sizeof(BiTNode));
    		bt->data = ch;
    		CreateBiTree(bt->LChild);
    		CreateBiTree(bt->RChild);
    	}
    }
    
    void PreOrder(BiTree root)//先序遍历 
    {
    	if (root != NULL)
    	{
    		printf("%c", root->data);
    		PreOrder(root->LChild);
    		PreOrder(root->RChild);
    	}
    }
    
    void InOrder(BiTree root)//中序遍历 
    {
    	if (root != NULL)
    	{
    		InOrder(root->LChild);
    		printf("%c", root->data);
    		InOrder(root->RChild);
    	}
    }
    
    void PostOrder(BiTree root)//后序遍历 
    {
    	if (root != NULL)
    	{
    		PostOrder(root->LChild);
    		PostOrder(root->RChild);
    		printf("%c", root->data);
    	}
    }
//层次遍历
	void levelbintree(BiTree t)
	{
		int f=0,r=1;
		BiTree q[50];
		BiTree p;
		q[0]=t;
		while(f<r)
		{
			p=q[f];
			printf("%c",p->data);
			if(p->LChild)
			{
				q[r]=p->LChild;
				r++;
			}
			if(p->RChild)
			{
				q[r]=p->RChild;
				r++;
			}
			f++;
		}
	}

  /* 非递归前序遍历二叉树 */
void PreOrder_no(BiTree b)
{
    BiTree stack[MaxSize], p;
    int top = -1;
    if (b != NULL)
    {
        /* 根节点入栈 */
        top++;
        stack[top] = b;
        /* 栈不空时循环 */
        while (top > -1)
        {
            /* 出栈并访问该节点 */
            p = stack[top];
            top--;
            printf("%c ", p->data);
            /* 右孩子入栈 */
            if (p->RChild != NULL)
            {
                top++;
                stack[top] = p->RChild;
            }
            /* 左孩子入栈 */
            if (p->LChild != NULL)
            {
                top++;
                stack[top] = p->LChild;
            }
        }
        printf("\n");
    }
}
 
/* 非递归中序遍历二叉树 */
void InOrder_no(BiTree b)
{
    BiTree stack[MaxSize], p;
    int top = -1;
    if (b != NULL)
    {
        p = b;
        while (top > -1 || p != NULL)
        {
           
            while (p != NULL)
            {
                top++;
                stack[top] = p;
                p = p->LChild;
            }
            if (top > -1)
            {
             
                p = stack[top];
                top--;
                printf("%c ", p->data);
           
                p = p->RChild;
            }
        }
        printf("\n");
    }
}
 
/* 非递归后序遍历二叉树 */
void PostOrder_no(BiTree b)
{
    BiTree stack[MaxSize], p;
    int sign, top = -1;
    if (b != NULL)
    {
        do
        {
       
            while (b != NULL)
            {
                top++;
                stack[top] = b;
                b = b->LChild;
            }
            
            p = NULL;
         
            sign = 1;
            while (top != -1 && sign)
            {
                
                b = stack[top];
                
                if (b->RChild == p)
                {
                    printf("%c ", b->data);
                    top--;
                   
                    p = b;
                }
                else
                {
                    
                    b = b->RChild;
                    
                    sign = 0;
                }
            }
        }while (top != -1);
        printf("\n");
    }
}  



 //树的深度   
    int Depth(BiTree T)
{
    if(T==NULL)
        return 0;
    else
    {
        int m=Depth(T->LChild);
        int n=Depth(T->RChild);
        if(m>n) return (m+1);
        else return (n+1);
    }
}
	//统计二叉树中结点的个数
	int NodeCount(BiTree T)
	{
	    if(T==NULL) return 0;
	    else return NodeCount(T->LChild)+NodeCount(T->RChild)+1;
	}
	
	//统计二叉树中叶子结点的个数
	int LeafCount(BiTree T)
	{
	    if(!T) return 0;
	    if(!T->LChild &&!T->RChild){
	        return 1;
	    }else{
	        return LeafCount(T->LChild)+LeafCount(T->RChild);
	    }
	}

//左右子树交换 
    void ExChangeTree(BiTree T)
{
    BiTree temp;
    if(T!=NULL){
        temp=T->LChild;
        T->LChild=T->RChild;
        T->RChild=temp;
        ExChangeTree(T->LChild);
        ExChangeTree(T->RChild);
    }
}

    //双序遍历算法
    void DoubleTraverse(BiTree T)
{
	if(T == NULL)
		return;
	else if(T->LChild==NULL&&T->RChild==NULL)
		printf("%c",T->data);     
	else
	{
		printf("%c",T->data);
		DoubleTraverse(T->LChild);   
		printf("%c",T->data);
		DoubleTraverse(T->RChild);   
	}
}

//

//二叉树最大宽度
int Width(BiTree bt)
{
	if (bt==NULL) 
		return (0);  
	else 
	{ 
	  BiTree Q[100],p;
      int front=1,rear=1,last=1;
      
      int temp=0,maxw=0;       
      Q[rear]=bt;           
      while(front<=last)
	  {
		  p=Q[front++]; 
		  temp++; 
          if (p->LChild!=NULL)  Q[++rear]=p->LChild;   
		  if (p->RChild!=NULL)  Q[++rear]=p->RChild;   
		  if (front>last)       
		  { 
			    last=rear;
				if(temp>maxw) maxw=temp;
				temp=0;
		  }//if    
	  }//while
	
     return (maxw);
	}
}
//
 void longest_path(BiTree T,int *path,int &len,int *longestpath,int &longest_len)
{
	if(T!=NULL)
	{
		if(T->LChild==NULL&&T->RChild==NULL)
		{
			path[len]=T->data;
			if(len>longest_len)
			{
				for(int j=0;j<=len;j++)
				{
					longestpath[j]=path[j];
				}
				longest_len=len;
			}
		}
		else
		{
			path[len++]=T->data;
			longest_path(T->LChild ,path,len,longestpath,longest_len);
			longest_path(T->RChild ,path,len,longestpath,longest_len);
			len--;
		}
	}
}

    int main()
    {
    	BiTree bt;
    	InitList(bt);
    	CreateBiTree(bt);
    	
    	printf("先序遍历：");
    	PreOrder(bt);
    	printf("\n");
    	
    	printf("中序遍历：");
    	InOrder(bt);
    	printf("\n");
    	
    	printf("后序遍历：");
    	PostOrder(bt);
    	printf("\n");
		printf("\n");
    	
		printf("层次遍历：");
    	levelbintree(bt);
    	printf("\n");
    	
    	printf("先序遍历(非递归)：");
    	PreOrder_no(bt);
    	printf("\n");
    	
    	printf("中序遍历(非递归)：");
    	InOrder_no(bt);
    	printf("\n");
    	
    	printf("后序遍历(非递归)：");
    	PostOrder_no(bt);
    	printf("\n");

    	printf("双序遍历:");
    	DoubleTraverse(bt); 
    	printf("\n");
    	


    	int depth;
    	depth = Depth(bt);
    	printf("树的深度为：%d\n",depth);
    	
    	int nodenum;
    	nodenum = NodeCount(bt);
    	printf("结点的数目：%d\n",nodenum);
		
		int leafnum;
    	leafnum = LeafCount(bt); 
    	printf("叶结点的数目：%d\n",leafnum);
    	
    	//左右子树交换 
//    	ExChangeTree(bt);
    	
    	int maxwidth;
		maxwidth=Width(bt);
		printf("最大宽度为：%d\n",maxwidth);
		
		int path[MaxSize]={0};
		int longestpath[MaxSize]={0};
		int len=0;
		int longest_len=0;
		longest_path(bt,path,len,longestpath,longest_len);
		printf("第一条最长的路径长度为：%d\n",longest_len);
		printf("路径为：");
		printf("%c",longestpath[0]); 
		for(int i=1;i<=longest_len;i++)
		{
			
			printf(" ->%c",longestpath[i]);
		}
		printf("\n");
    	return 0;
    }