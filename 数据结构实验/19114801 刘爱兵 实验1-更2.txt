#include<stdio.h>
#include<string.h>
#include<stdlib.h>

#define MaxSize 20

typedef struct Books{
	char book_number[20];
	char book_name[20];	
	double book_price;
}Book;

typedef struct{
	Book *book;
	int length;
}SqList;

//初始化链表
void InitLink(SqList *L){
    L->book=(Book*)malloc(MaxSize*sizeof(SqList));
    L->length=0;
}

//图书信息表创建及批量输入（提供两种输入方式）
void info_input(SqList *L){
    Book book;
	int flag;
    int mark=0;
    int num=0,i,j;
	printf("选择输入的方式:0.批量输入\t1.按书本数量输入\n");
	scanf("%d",&flag);
    if(!flag){
            printf("输入书号为0时结束录入\n");
			printf("请输入书号\t书名\t价格:\n");
            do
            {
                scanf("%s%s%lf",book.book_name,book.book_number,&book.book_price);
                for(j=0;j<L->length-1;j++);{
                    if(!strcmp(book.book_number,L->book[j].book_number)){
                        mark=1;      
                    }
                }
                if(mark){printf("该书已存在"); L->length++;}//这里length增加是因为线性表数据没有加入但长度在减一行录入成功那一行里
                else{L->book[L->length++]=book;}
            }while(book.book_price!=0);
            L->length--;
			
    }
    else{
        printf("请输入你要录入书本的数量:\n");
        scanf("%d",&num);
        printf("请输入书号\t书名\t价格:\n");
        for(i=0;i<num;i++){
            scanf("%s%s%lf",book.book_number,book.book_name,&book.book_price);
                for(j=0;j<L->length-1;j++);{
                    if(!strcmp(book.book_number,L->book[j].book_number)){
                        mark=1;      
                    }
                }
                if(mark){printf("该书已存在");L->length++;}
                else{L->book[L->length++]=book;}
        }
        L->length--;printf("录入成功！\n");
    }
}

//图书信息表的输出
void info_output(SqList *L){
	int i;
	printf("图书总计%d\n",L->length);
	printf("图书信息:书号\t书名\t价格\n");
	for(i=0;i<L->length;i++){
		printf("\t%s\t%s\t%0.2lf\n",L->book[i].book_number,L->book[i].book_name,L->book[i].book_price);
	}
}
//图书信息表的排序-- 冒泡排序
void info_sort(SqList *L){
    int i,j;double temp;
    for(i=0;i<L->length-1;i++){
        for(j=L->length-1;j>i;j--){
            if(L->book[j].book_price<L->book[j-1].book_price){
                temp=L->book[j].book_price;
                L->book[j].book_price=L->book[j-1].book_price;
                L->book[j-1].book_price=temp;
            }
        }
    }
    printf("图书信息按价格从大到小排序完毕！如下:");
    printf("图书总计%d\n",L->length);
	printf("图书信息:书号\t书名\t价格\n");
	for(i=0;i<L->length;i++){
		printf("\t%s\t%s\t%.2f\n",L->book[i].book_number,L->book[i].book_name,L->book[i].book_price);
	}
}
//图书信息表的修改
void info_set(SqList *L){
    int i;double sum=0;
    double average;
    //求和算出图书价格总和
    for(i=0;i<L->length;i++){
        sum+=L->book[i].book_price;
    }
    average =sum/L->length;
    //按价格进行不同提高
    for(i=0;i<L->length;i++){
        if(L->book[i].book_price<average){
            L->book[i].book_price=L->book[i].book_price*1.2;
        }
        else{L->book[i].book_price=L->book[i].book_price*1.1;}
    }
    printf("所有图书的平均价格为:%.2f\n",average);
	printf("图书信息:书号\t书名\t价格\n");
    for(i=0;i<L->length;i++){
		printf("\t%s\t%s\t%.2f\n",L->book[i].book_number,L->book[i].book_name,L->book[i].book_price);
	}
}
//图书的逆序存储
void info_reverse(SqList *L){
    int i,j;
	double t;char temp[20];
    for(i=0,j=L->length-1;i<L->length/2;i++,j--){
        //书名交换
        strcpy(temp,L->book[i].book_name);
        strcpy(L->book[i].book_name,L->book[j].book_name);
        strcpy(L->book[j].book_name,temp);
        //书号交换
        strcpy(temp,L->book[i].book_number);
        strcpy(L->book[i].book_name,L->book[j].book_number);
        strcpy(L->book[j].book_number,temp);
        //书本价格交换
        t=L->book[i].book_price;
        L->book[i].book_price=L->book[j].book_price;
        L->book[j].book_price=t;
    }
    printf("图书信息:书号\t书名\t价格\n");
    for(i=0;i<L->length;i++){
		printf("\t%s\t%s\t%.2f\n",L->book[i].book_number,L->book[i].book_name,L->book[i].book_price);
	}
}
//最贵图书的查找
void search_price(SqList *L){
    int i,j=0;
    for(i=0;i<L->length-1;i++){
            if(L->book[i].book_price>L->book[j].book_price){
                j=i;
            }
    }
    printf("图书信息:书号\t书名\t价格\n");
    for(i=0;i<L->length-1;i++){
            if(L->book[i].book_price==L->book[j].book_price){
                printf("\t%s\t%s\t%.2f\n",L->book[i].book_number,L->book[i].book_name,L->book[i].book_price);
            }
    }
}
//最爱图书的查找
void search_name(SqList *L){
        char name[20][20];
        int num,i,j,flag=0;
        printf("输入你要查找的图书数量:\n");
        scanf("%d",&num);
        printf("输入你要查找的图书书名:\n");
        for(i=0;i<num;i++){
            scanf("%s",name[i]);
        }
        for(i=0;i<L->length;i++){
            for(j=0;j<num;j++){
                if(!strcmp(L->book[i].book_name,name[j])){
                printf("太好了,找到你想要的书了\n");
				printf("图书信息:书号\t书名\t价格\n");
				printf("\t%s\t%s\t%.2f\n",L->book[i].book_number,L->book[i].book_name,L->book[i].book_price);
				flag=1;
            }
            }   
        }
        if(flag==0){printf("抱歉，没有你的最爱!\n");}
}
//最佳位置图书的查找
void search_position(SqList *L){
    int i,p,j;
    info_input(L);
    int num;
    printf("请输入你需要查找的次数:");
    scanf("%d",&num);
    for(i=0;i<num;i++){
        printf("请输入你需要查找的图书位置:");
        scanf("%d",&p);
		p--;
        if(p>L->length||p<0){printf("抱歉，最佳位置上的图书不存在！");}
        else{
            printf("图书信息:书号\t书名\t价格\n");
            printf("\t%s\t%s\t%.2f\n",L->book[p].book_number,L->book[p].book_name,L->book[p].book_price);
        }
    }
}
//新图书的入库
void book_in(SqList *L){
    int i,p;
    info_input(L);
    printf("请输入你要插入书本的位置:\n");
    scanf("%d",&p);
	p--;
    for(i=L->length;i>p;i--){
        L->book[i]=L->book[i-1];
    }
    printf("图书信息:书号\t书名\t价格\n");
    scanf("\t%s%s%2lf",L->book[p].book_number,L->book[p].book_name,&L->book[p].book_price);
    L->length++;
    printf("图书信息:书号\t书名\t价格\n");
    for(i=0;i<L->length;i++){
		printf("\t%s\t%s\t%.2f\n",L->book[i].book_number,L->book[i].book_name,L->book[i].book_price);
	}
}
//旧图书的出库
void book_out(SqList *L){
    int i,p;
    info_input(L);
    printf("请输入你要删除书本的位置:\n");
    scanf("%d",&p);
    for(i=p-1;i<L->length-1;i++){
        L->book[i]=L->book[i+1];
    }
    L->length--;
    printf("图书信息:书号\t书名\t价格\n");
    for(i=0;i<L->length;i++){
		printf("\t%s\t%s\t%.2f\n",L->book[i].book_number,L->book[i].book_name,L->book[i].book_price);
	}
}

void menu(){
    printf("|————————0.菜单————————|\n");
    printf("|1.图书信息表的创建\t2.图书信息表的输出\n");
    printf("|3.图书信息表的排序\t4.图书信息表的修改\n");
    printf("|5.图书的逆序存储\t6.最贵图书的查找\n");
    printf("|7.最爱图书的查找\t8.最佳位置图书的查找\n");
    printf("|9.新图书的入库\t10.旧图书的出库       \n");
    printf("|——————---11.退出————————|\n");
}

int main(){
    SqList *L;
    int k;
	//动态分配内存
	L=(SqList*)malloc(MaxSize*sizeof(SqList));
	menu();
    InitLink(L);
    do{
        printf("请输入你要执行的操作:");
        scanf("%d",&k);
        switch (k)
        {
		case 0:menu();
            break;
        case 1:info_input(L);
            break;
        case 2:info_output(L);
            break;
        case 3:info_sort(L);
            break;
        case 4:info_set(L);
            break;
        case 5:info_reverse(L);
            break;
        case 6:search_price(L);
            break;
        case 7:search_name(L);
            break;
        case 8:search_position(L);
            break;
        case 9:book_in(L);
            break;
        case 10:book_out(L);
            break;    
        }
    }while (k!=11);
	return 0;
}