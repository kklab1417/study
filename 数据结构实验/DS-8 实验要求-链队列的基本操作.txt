【实验内容】
请用链式存储方式表示队列，并实现队列的基本操作。

【基本要求】
程序健壮性，请酌情处理。

【参考代码】
此段代码是使用动态顺序存储方式来存放循环队列，并实现顺序循环队列的基本操作。
Tip：特别注意循环队列中队空和队满的判断条件。

#include "stdio.h"
#include "stdlib.h"
typedef int QElemType;
typedef int Status;
#define OK 1
#define TRUE 1
#define FALSE 0
#define ERROR 0
#define OVERFLOW -2
#define MaxQsize 100   	//最大队列长度
typedef struct {
	QElemType *base;   	//初始化的动态分配存储空间
	int front;     		//头指针，若队列不空，指向队列头元素
	int rear;  			//尾指针，若队列不空，指向队列尾元素的下一个位置
}SqQueue;
Status InitQueue(SqQueue *Q){	//构造一个空队列Q
	(*Q).base=(QElemType *)malloc(MaxQsize*sizeof(QElemType));
	if(!(*Q).base) 			return(OVERFLOW);	//存储分配失败
	(*Q).front=(*Q).rear=0;		return OK;
}
Status QueueEmpty(SqQueue Q){	//若队列Q为空队列，则返回TRUE，否则返回FALSE
	if(Q.front==Q.rear)		return TRUE;
	else 				return FALSE;
}
int QueueLength(SqQueue Q){	//返回Q的元素个数，即为队列的长度
	return(Q.rear-Q.front+MaxQsize)% MaxQsize;
}
Status GetHead(SqQueue Q,QElemType *e){
//若队列不为空，则用e返回Q的队头元素，并返回OK；否则返回ERROR
	if(Q.front==Q.rear) 		return ERROR;
	*e=Q.base[Q.front];
	return OK;
}

Status EnQueue(SqQueue *Q,QElemType e){	//插入元素e为Q的新的队尾元素
	if(((*Q).rear+1)%MaxQsize==(*Q).front) 		return ERROR;	//队列满
	(*Q).base[(*Q).rear]=e;
	(*Q).rear=((*Q).rear+1)%MaxQsize;
	return OK;
}
Status DeQueue(SqQueue *Q,QElemType *e){
//若队列不空，则删除Q的队头元素，用e返回其值，并返回OK,否则返回ERROR
	if((*Q).rear==(*Q).front) 		return ERROR;	//队列空
	*e=(*Q).base[(*Q).front];
	(*Q).front=((*Q).front+1)%MaxQsize;
	return OK;
}
void PrQueue(SqQueue *Q){
	int f;
	f=(*Q).front;
	for(f;f<(*Q).rear;f++)		printf("%d\t",(*Q).base[f]);
	printf("\n");
}
void main(){
	SqQueue Q;
	int select;
	QElemType e;
    if (InitQueue(&Q)==OVERFLOW)
        printf("分配失败，即将退出程序！");
	else		//否则显示队列操作的菜单，并选择相应的基本操作
		do {
			printf("\n");
			printf("1：判断队列是否为空\n");
			printf("2：测试队列的长度\n" );  
			printf("3：取队头元素值\n");
			printf("4：向队列中插入一新元素\n");
			printf("5：删除队列中一元素\n");
			printf("0：结束\n");
			printf("请输入你的选择（序号1-5）：");
			scanf("%d",&select);
			switch (select) {
			case 1: 
				if (QueueEmpty(Q)==TRUE)		
					printf("队列为空\n");
				else		
					printf("队列不为空\n");
				break;
			case 2:
				printf("当前队列为：");
				PrQueue(&Q);
				printf("队列长度为：%d\n",QueueLength(Q));
				break;
			case 3: 
				if(GetHead(Q,&e)==ERROR) 	
					printf("队列为空\n");
				else{ 
					printf("当前队列为：");
					PrQueue(&Q);
					printf("队首元素为：%d\n",e);
				}
				break;
			case 4: 
				printf("请输入待插入元素：");
				scanf("%d",&e);
				if(EnQueue(&Q,e)==ERROR) 	
					printf("队列满\n");
				else{ 
					printf("元素成功插入\n");
					printf("插入元素%d后，队列为：",e);
					PrQueue(&Q);
				}
				break;
			case 5: 
				if(DeQueue(&Q,&e)==ERROR) 		
					printf("队列空,无数据可删\n");
				else{ 
					printf("删除元素为：%d\n",e);
					printf("你删除的元素为：%d，删除后，队列为：",e);
					PrQueue(&Q);
				}
				break;
			case 0: 
				printf("操作结束\n\n");
				break;
            default:
				printf("输入选择出错！\n");
			}/*switch*/
		}while (select);
}//main_end
